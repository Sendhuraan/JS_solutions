{
  "stats": {
    "suites": 101,
    "tests": 238,
    "passes": 238,
    "pending": 0,
    "failures": 0,
    "start": "2019-09-08T12:00:09.930Z",
    "end": "2019-09-08T12:00:10.127Z",
    "duration": 197,
    "testsRegistered": 238,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c531d79b-a2d7-4bd3-9b85-8d0e8effdaf8",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5a139ff2-68a9-4ab6-95da-cc9d8f77d0ce",
          "title": "Primitive Types",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\01_primitive-types\\01_index_docs.js",
          "file": "\\src\\collection\\js-basics\\01_types\\01_primitive-types\\01_index_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Given a primitive type, we have a set of expected behaviors for that type. Eg: Given number 42, it has expected behaviors such as we can do math on that. Given a string '42', we can expect it to get its individual chars and print to console.",
              "fullTitle": "Primitive Types Given a primitive type, we have a set of expected behaviors for that type. Eg: Given number 42, it has expected behaviors such as we can do math on that. Given a string '42', we can expect it to get its individual chars and print to console.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "6816fc75-1475-4753-b3cd-1bc1504e72a8",
              "parentUUID": "5a139ff2-68a9-4ab6-95da-cc9d8f77d0ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Classified into\n\t\t\tundefined\n\t\t\tnull \n\t\t\tstring \n\t\t\tnumber \n\t\t\tboolean \n\t\t\tobject \n\t\t\t\tfunction (subtype of object - special callable object)\n\t\t\tsymbol (ES6)\n\t\t\tbigint (ES6)\n\t\t",
              "fullTitle": "Primitive Types Classified into\n\t\t\tundefined\n\t\t\tnull \n\t\t\tstring \n\t\t\tnumber \n\t\t\tboolean \n\t\t\tobject \n\t\t\t\tfunction (subtype of object - special callable object)\n\t\t\tsymbol (ES6)\n\t\t\tbigint (ES6)\n\t\t",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "bf5bec5f-4523-486f-ad73-1208b68d9ad2",
              "parentUUID": "5a139ff2-68a9-4ab6-95da-cc9d8f77d0ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "As Javascript is dynamically typed language, it has type of a VALUE that the variable is currently holding",
              "fullTitle": "Primitive Types As Javascript is dynamically typed language, it has type of a VALUE that the variable is currently holding",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "4454cf20-daf4-4aea-b081-daed068b4e11",
              "parentUUID": "5a139ff2-68a9-4ab6-95da-cc9d8f77d0ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "when typeof operator used on a variable, returns the value type that the variable is currently holding",
              "fullTitle": "Primitive Types when typeof operator used on a variable, returns the value type that the variable is currently holding",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "facd01a4-4a38-423f-900a-627120f5a2d2",
              "parentUUID": "5a139ff2-68a9-4ab6-95da-cc9d8f77d0ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "typeof operator will always return a string. It will not actually return the primitive type of the variable",
              "fullTitle": "Primitive Types typeof operator will always return a string. It will not actually return the primitive type of the variable",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "2d56b8dc-a681-4ed9-9c1b-090c17915db9",
              "parentUUID": "5a139ff2-68a9-4ab6-95da-cc9d8f77d0ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "returns string 'number' when used typeof operator on number",
              "fullTitle": "Primitive Types returns string 'number' when used typeof operator on number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(typeof 42, 'number');",
              "err": {},
              "uuid": "f0cf4b53-6d52-4653-bed4-23780450f4c2",
              "parentUUID": "5a139ff2-68a9-4ab6-95da-cc9d8f77d0ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "returns string 'string' when used typeof operator on string",
              "fullTitle": "Primitive Types returns string 'string' when used typeof operator on string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(typeof '42', 'string');",
              "err": {},
              "uuid": "c8f2a633-8807-49c2-9bb0-d0aba5df1946",
              "parentUUID": "5a139ff2-68a9-4ab6-95da-cc9d8f77d0ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "returns string 'boolean' when used typeof operator on boolean",
              "fullTitle": "Primitive Types returns string 'boolean' when used typeof operator on boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(typeof true, 'boolean');",
              "err": {},
              "uuid": "e71d59ce-9e59-49dd-85fd-8fa7e21e95a6",
              "parentUUID": "5a139ff2-68a9-4ab6-95da-cc9d8f77d0ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "returns string 'object' when used typeof operator on object",
              "fullTitle": "Primitive Types returns string 'object' when used typeof operator on object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(typeof { a: 1 }, 'object');",
              "err": {},
              "uuid": "9a6fff56-16eb-47b6-9e52-15894166ae8f",
              "parentUUID": "5a139ff2-68a9-4ab6-95da-cc9d8f77d0ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "returns string 'function' when used typeof operator on function",
              "fullTitle": "Primitive Types returns string 'function' when used typeof operator on function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(typeof function(){}, 'function');",
              "err": {},
              "uuid": "f9b1b154-cf4f-4fc0-838d-58dd8570960c",
              "parentUUID": "5a139ff2-68a9-4ab6-95da-cc9d8f77d0ce",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6816fc75-1475-4753-b3cd-1bc1504e72a8",
            "bf5bec5f-4523-486f-ad73-1208b68d9ad2",
            "4454cf20-daf4-4aea-b081-daed068b4e11",
            "facd01a4-4a38-423f-900a-627120f5a2d2",
            "2d56b8dc-a681-4ed9-9c1b-090c17915db9",
            "f0cf4b53-6d52-4653-bed4-23780450f4c2",
            "c8f2a633-8807-49c2-9bb0-d0aba5df1946",
            "e71d59ce-9e59-49dd-85fd-8fa7e21e95a6",
            "9a6fff56-16eb-47b6-9e52-15894166ae8f",
            "f9b1b154-cf4f-4fc0-838d-58dd8570960c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "511c2bb7-8403-43de-9e10-f30fd3d3f9d0",
          "title": "null - a historical bug in javascript",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\01_primitive-types\\01_index_docs.js",
          "file": "\\src\\collection\\js-basics\\01_types\\01_primitive-types\\01_index_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "returns string 'object' when used typeof operator on null, while we may expect that it should return 'null'. This is a bug in javascript",
              "fullTitle": "null - a historical bug in javascript returns string 'object' when used typeof operator on null, while we may expect that it should return 'null'. This is a bug in javascript",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(typeof null, 'object');",
              "err": {},
              "uuid": "9e92ec72-0a16-45e0-b221-0463e372dfd7",
              "parentUUID": "511c2bb7-8403-43de-9e10-f30fd3d3f9d0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9e92ec72-0a16-45e0-b221-0463e372dfd7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1dd0afd2-cd8c-4291-be34-c156ca329daa",
          "title": "undeclared vs undefined",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\01_primitive-types\\01_index_docs.js",
          "file": "\\src\\collection\\js-basics\\01_types\\01_primitive-types\\01_index_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "returns string 'undefined' when used typeof operator on variable that is not DECLARED",
              "fullTitle": "undeclared vs undefined returns string 'undefined' when used typeof operator on variable that is not DECLARED",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(typeof anyVarThatIsNotDeclared, 'undefined');",
              "err": {},
              "uuid": "ffa098b7-e6bf-4e75-90c7-7caf3f0d4445",
              "parentUUID": "1dd0afd2-cd8c-4291-be34-c156ca329daa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "returns string 'undefined' when used typeof operator on variable that is not DEFINED",
              "fullTitle": "undeclared vs undefined returns string 'undefined' when used typeof operator on variable that is not DEFINED",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var foo;\nassert.equal(typeof foo, 'undefined');",
              "err": {},
              "uuid": "c8309a8e-a41f-45ae-ad3d-2665e2faba0a",
              "parentUUID": "1dd0afd2-cd8c-4291-be34-c156ca329daa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ffa098b7-e6bf-4e75-90c7-7caf3f0d4445",
            "c8309a8e-a41f-45ae-ad3d-2665e2faba0a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4dba0b49-a46f-4328-a2fa-53300adf8e9c",
          "title": "bigint",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\01_primitive-types\\01_index_docs.js",
          "file": "\\src\\collection\\js-basics\\01_types\\01_primitive-types\\01_index_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "It is a separate partition from numbers, where it grow upto memory limit of the system. It can't be mixed and matched with regular numbers.",
              "fullTitle": "bigint It is a separate partition from numbers, where it grow upto memory limit of the system. It can't be mixed and matched with regular numbers.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "cf6a619b-cb80-4718-b457-5db181b8a720",
              "parentUUID": "4dba0b49-a46f-4328-a2fa-53300adf8e9c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cf6a619b-cb80-4718-b457-5db181b8a720"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2dbd1cfd-49d1-44ae-826d-6a64314a018d",
          "title": "symbol",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\01_primitive-types\\01_index_docs.js",
          "file": "\\src\\collection\\js-basics\\01_types\\01_primitive-types\\01_index_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "returns string 'symbol' when used typeof operator on symbol",
              "fullTitle": "symbol returns string 'symbol' when used typeof operator on symbol",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var symbol = Symbol();\nassert.equal(typeof symbol, 'symbol');",
              "err": {},
              "uuid": "9ff5eb50-bd85-454e-bd3b-5b7dd1f74acc",
              "parentUUID": "2dbd1cfd-49d1-44ae-826d-6a64314a018d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9ff5eb50-bd85-454e-bd3b-5b7dd1f74acc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ff071aba-52d5-4359-96ec-3783dc169c19",
          "title": "Primitive Type - function",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\01_primitive-types\\01_index_docs.js",
          "file": "\\src\\collection\\js-basics\\01_types\\01_primitive-types\\01_index_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "As mentioned earlier, given a primitive type, we have a set of expected behaviors for that type. Definitely, a function has some set of expected behaviors. Eg: We can call a function",
              "fullTitle": "Primitive Type - function As mentioned earlier, given a primitive type, we have a set of expected behaviors for that type. Definitely, a function has some set of expected behaviors. Eg: We can call a function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "1dbde5e6-67ba-4f3a-8808-eab149aa82e8",
              "parentUUID": "ff071aba-52d5-4359-96ec-3783dc169c19",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "is not actually a primitive type. It is a subtype of object primitive. It is also referred to as callable object",
              "fullTitle": "Primitive Type - function is not actually a primitive type. It is a subtype of object primitive. It is also referred to as callable object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "37e9650d-dce2-41ee-8cc3-2a78fe91c7af",
              "parentUUID": "ff071aba-52d5-4359-96ec-3783dc169c19",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1dbde5e6-67ba-4f3a-8808-eab149aa82e8",
            "37e9650d-dce2-41ee-8cc3-2a78fe91c7af"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f372e379-cfe9-410f-8261-abf60b6013bb",
          "title": "Other in-built types are objects",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\01_primitive-types\\01_index_docs.js",
          "file": "\\src\\collection\\js-basics\\01_types\\01_primitive-types\\01_index_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "returns string 'object' when used typeof operator on other built in objects like Array, Date, Regular expression, etc",
              "fullTitle": "Other in-built types are objects returns string 'object' when used typeof operator on other built in objects like Array, Date, Regular expression, etc",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "902f2284-322b-4fa2-88e9-431aa7d49236",
              "parentUUID": "f372e379-cfe9-410f-8261-abf60b6013bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "returns string 'object' when used typeof operator on arrays",
              "fullTitle": "Other in-built types are objects returns string 'object' when used typeof operator on arrays",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var array = [];\nassert.equal(typeof array, 'object');",
              "err": {},
              "uuid": "ed0b7cd6-5541-4d59-9c7e-eb3292fbf1de",
              "parentUUID": "f372e379-cfe9-410f-8261-abf60b6013bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "returns string 'object' when used typeof operator on dates",
              "fullTitle": "Other in-built types are objects returns string 'object' when used typeof operator on dates",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var date = new Date();\nassert.equal(typeof date, 'object');",
              "err": {},
              "uuid": "c4356b5b-03e3-4104-88b8-255aacacf41b",
              "parentUUID": "f372e379-cfe9-410f-8261-abf60b6013bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "returns string 'object' when used typeof operator on regular expressions",
              "fullTitle": "Other in-built types are objects returns string 'object' when used typeof operator on regular expressions",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var pattern = /ab/gi;\nassert.equal(typeof pattern, 'object');",
              "err": {},
              "uuid": "e0b380a7-ceb0-44c2-b3ee-0dcf514684fa",
              "parentUUID": "f372e379-cfe9-410f-8261-abf60b6013bb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "902f2284-322b-4fa2-88e9-431aa7d49236",
            "ed0b7cd6-5541-4d59-9c7e-eb3292fbf1de",
            "c4356b5b-03e3-4104-88b8-255aacacf41b",
            "e0b380a7-ceb0-44c2-b3ee-0dcf514684fa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9fe7aeb0-0d3a-4d55-9561-f3ec0d03ca8c",
          "title": "Primitive Types - Examples",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\01_primitive-types\\02_examples_docs.js",
          "file": "\\src\\collection\\js-basics\\01_types\\01_primitive-types\\02_examples_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 'undefined' when the variable is not yet declared or declared, but currently has no value",
              "fullTitle": "Primitive Types - Examples should return 'undefined' when the variable is not yet declared or declared, but currently has no value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var a;\nassert.equal(typeof a, 'undefined');",
              "err": {},
              "uuid": "abd6a7b3-5e04-49c4-b40e-a33ec3f9fca5",
              "parentUUID": "9fe7aeb0-0d3a-4d55-9561-f3ec0d03ca8c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 'string', when typeof operation is assigned to a variable, because typeof always return string.",
              "fullTitle": "Primitive Types - Examples should return 'string', when typeof operation is assigned to a variable, because typeof always return string.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var output = typeof anyVarThatIsNotDeclaredOrNotDeclared;\nassert.equal(typeof output, 'string');",
              "err": {},
              "uuid": "e7c9ce59-fa7d-4411-9dae-172a5746cd44",
              "parentUUID": "9fe7aeb0-0d3a-4d55-9561-f3ec0d03ca8c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 'string' if typeof operator is used on another typeof operation.",
              "fullTitle": "Primitive Types - Examples should return 'string' if typeof operator is used on another typeof operation.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(typeof typeof 2, 'string');",
              "err": {},
              "uuid": "4a1983b8-3c2c-4ee4-9e3c-f08a07d27c9a",
              "parentUUID": "9fe7aeb0-0d3a-4d55-9561-f3ec0d03ca8c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "abd6a7b3-5e04-49c4-b40e-a33ec3f9fca5",
            "e7c9ce59-fa7d-4411-9dae-172a5746cd44",
            "4a1983b8-3c2c-4ee4-9e3c-f08a07d27c9a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "92a61e31-e009-4818-a05f-9a0dce3ac0d5",
          "title": "Native Functions",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\02_native-functions\\index_docs.js",
          "file": "\\src\\collection\\js-basics\\01_types\\02_native-functions\\index_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Native funtions can be called with new operator in front of it or can be called as regular functions.",
              "fullTitle": "Native Functions Native funtions can be called with new operator in front of it or can be called as regular functions.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "0710a31b-a9f9-4582-b6ff-fd09d52bfc29",
              "parentUUID": "92a61e31-e009-4818-a05f-9a0dce3ac0d5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Classified into\n\t\t\tString\n\t\t\tNumber\n\t\t\tBoolean\n\t\t\tArray\n\t\t\tObject\n\t\t\tRegExp\n\t\t\tDate\n\t\t\tFunction\n\t\t\tError\n\t\t",
              "fullTitle": "Native Functions Classified into\n\t\t\tString\n\t\t\tNumber\n\t\t\tBoolean\n\t\t\tArray\n\t\t\tObject\n\t\t\tRegExp\n\t\t\tDate\n\t\t\tFunction\n\t\t\tError\n\t\t",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "ca046843-b07e-4b56-ae1f-1d99fd49dace",
              "parentUUID": "92a61e31-e009-4818-a05f-9a0dce3ac0d5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "03efd9d3-77a2-4be9-b6f1-2c7c8e177b09",
              "title": "Call Natives as Constructors",
              "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\02_native-functions\\index_docs.js",
              "file": "\\src\\collection\\js-basics\\01_types\\02_native-functions\\index_docs.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Calling with new operator creates an object wrapper around the primitive type. This can be verified using typeof operator on the newly constructed object",
                  "fullTitle": "Native Functions Call Natives as Constructors Calling with new operator creates an object wrapper around the primitive type. This can be verified using typeof operator on the newly constructed object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var output = new String('abc');\nassert.equal(typeof output, 'object');",
                  "err": {},
                  "uuid": "0078104c-6add-45d4-b8b7-31d497c24fce",
                  "parentUUID": "03efd9d3-77a2-4be9-b6f1-2c7c8e177b09",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "There are some caveats in calling as constructors, as it constructs object around primitives.",
                  "fullTitle": "Native Functions Call Natives as Constructors There are some caveats in calling as constructors, as it constructs object around primitives.",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "64b9d71b-71d6-468d-9dd0-5742ce6850fc",
                  "parentUUID": "03efd9d3-77a2-4be9-b6f1-2c7c8e177b09",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Example, false as (boolean primitive) is falsy, but false as (Boolean Object) is truthy. Calling new Boolean(false) will return empty object, which is truthy (weird!)",
                  "fullTitle": "Native Functions Call Natives as Constructors Example, false as (boolean primitive) is falsy, but false as (Boolean Object) is truthy. Calling new Boolean(false) will return empty object, which is truthy (weird!)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var a = false;\nvar b = new Boolean(false);\nassert.equal(a, false);\nassert.equal(Boolean(b), true);",
                  "err": {},
                  "uuid": "7b5ded6f-af1a-42c5-a4a7-67fe63448e05",
                  "parentUUID": "03efd9d3-77a2-4be9-b6f1-2c7c8e177b09",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Similarly, 0 as (number primitive) is falsy, but 0 as (Number Object) is truthy. Calling new Number(0) will return empty object, which is truthy (weird!)",
                  "fullTitle": "Native Functions Call Natives as Constructors Similarly, 0 as (number primitive) is falsy, but 0 as (Number Object) is truthy. Calling new Number(0) will return empty object, which is truthy (weird!)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var a = 0;\nvar b = new Number(0);\nassert.equal(a, false);\nassert.equal(Boolean(b), true);",
                  "err": {},
                  "uuid": "d3a19f97-91da-4f08-9434-9bf46c938992",
                  "parentUUID": "03efd9d3-77a2-4be9-b6f1-2c7c8e177b09",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Similarly, '' as (string primitive) is falsy, but '' as (String Object) is truthy. Calling new String('') will return empty object, which is truthy (weird!)",
                  "fullTitle": "Native Functions Call Natives as Constructors Similarly, '' as (string primitive) is falsy, but '' as (String Object) is truthy. Calling new String('') will return empty object, which is truthy (weird!)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var a = '';\nvar b = new String('');\nassert.equal(a, false);\nassert.equal(Boolean(b), true);",
                  "err": {},
                  "uuid": "45b7e15b-e1dc-4473-90ad-b64d16590b8f",
                  "parentUUID": "03efd9d3-77a2-4be9-b6f1-2c7c8e177b09",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Hence, it is better to avoid building primitives using constructors.",
                  "fullTitle": "Native Functions Call Natives as Constructors Hence, it is better to avoid building primitives using constructors.",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "14f7ce89-a404-46b8-bd32-2e24bf6877a0",
                  "parentUUID": "03efd9d3-77a2-4be9-b6f1-2c7c8e177b09",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0078104c-6add-45d4-b8b7-31d497c24fce",
                "64b9d71b-71d6-468d-9dd0-5742ce6850fc",
                "7b5ded6f-af1a-42c5-a4a7-67fe63448e05",
                "d3a19f97-91da-4f08-9434-9bf46c938992",
                "45b7e15b-e1dc-4473-90ad-b64d16590b8f",
                "14f7ce89-a404-46b8-bd32-2e24bf6877a0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b2ed4d55-4967-4426-ae7d-8956a11e6059",
              "title": "Call Natives as Functions",
              "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\02_native-functions\\index_docs.js",
              "file": "\\src\\collection\\js-basics\\01_types\\02_native-functions\\index_docs.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Calling as regular function creates the primitive respectively",
                  "fullTitle": "Native Functions Call Natives as Functions Calling as regular function creates the primitive respectively",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var output = String('abc');\nassert.equal(typeof output, 'string');",
                  "err": {},
                  "uuid": "c1d22dc6-e2d4-4527-b2e0-cd0dc41caca5",
                  "parentUUID": "b2ed4d55-4967-4426-ae7d-8956a11e6059",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Calling as regular function will also coerce the value to its primitive type",
                  "fullTitle": "Native Functions Call Natives as Functions Calling as regular function will also coerce the value to its primitive type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var output = String(42);\nassert.equal(typeof output, 'string');",
                  "err": {},
                  "uuid": "01d50463-999b-48ee-8410-785aef742569",
                  "parentUUID": "b2ed4d55-4967-4426-ae7d-8956a11e6059",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c1d22dc6-e2d4-4527-b2e0-cd0dc41caca5",
                "01d50463-999b-48ee-8410-785aef742569"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "0710a31b-a9f9-4582-b6ff-fd09d52bfc29",
            "ca046843-b07e-4b56-ae1f-1d99fd49dace"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0af4d0a1-740d-4a15-9b42-8e865dbc921c",
          "title": "Array",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\02_native-functions\\index_docs.js",
          "file": "\\src\\collection\\js-basics\\01_types\\02_native-functions\\index_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Array can be created by constructor form or literal syntax.",
              "fullTitle": "Array Array can be created by constructor form or literal syntax.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "19a80f14-fe44-41f9-80fa-6a4eaec8237b",
              "parentUUID": "0af4d0a1-740d-4a15-9b42-8e865dbc921c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "a63a8cb2-4a55-412b-b0d5-55d51498d25e",
              "title": "Constructor Syntax",
              "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\02_native-functions\\index_docs.js",
              "file": "\\src\\collection\\js-basics\\01_types\\02_native-functions\\index_docs.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "In this form, arrays can be created by using new operator",
                  "fullTitle": "Array Constructor Syntax In this form, arrays can be created by using new operator",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var arr = new Array(1,2,3);\nassert.equal(typeof arr, 'object');\nassert.equal(arr.length, 3);\nassert.equal(arr[0], 1);",
                  "err": {},
                  "uuid": "23fcb8fa-6669-40a0-b497-5c0c7d1ce6a1",
                  "parentUUID": "a63a8cb2-4a55-412b-b0d5-55d51498d25e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "But, When called with single value like new Array(5), we would expect that it would create an array with one element of value 5. But because Array Constructor is overloaded, it creates an array with 5 empty slots instead (weird!)",
                  "fullTitle": "Array Constructor Syntax But, When called with single value like new Array(5), we would expect that it would create an array with one element of value 5. But because Array Constructor is overloaded, it creates an array with 5 empty slots instead (weird!)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var arr = new Array(5);\nassert.notEqual(arr[0], 5);\nassert.equal(arr.length, 5);",
                  "err": {},
                  "uuid": "e5763508-6f1c-4dba-b81c-f9e5f23ccfa0",
                  "parentUUID": "a63a8cb2-4a55-412b-b0d5-55d51498d25e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Hence, it is better to avoid constructor syntax due to these caveats.",
                  "fullTitle": "Array Constructor Syntax Hence, it is better to avoid constructor syntax due to these caveats.",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "e268310d-5aef-4e98-883d-197a824c1029",
                  "parentUUID": "a63a8cb2-4a55-412b-b0d5-55d51498d25e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "23fcb8fa-6669-40a0-b497-5c0c7d1ce6a1",
                "e5763508-6f1c-4dba-b81c-f9e5f23ccfa0",
                "e268310d-5aef-4e98-883d-197a824c1029"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9b8a0cff-91cd-464d-ad50-c23c2da5d5c4",
              "title": "Literal Syntax",
              "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\02_native-functions\\index_docs.js",
              "file": "\\src\\collection\\js-basics\\01_types\\02_native-functions\\index_docs.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "In this form, arrays can be created by using square brackets []",
                  "fullTitle": "Array Literal Syntax In this form, arrays can be created by using square brackets []",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var arr = [1,2,3];\nassert.equal(typeof arr, 'object');\nassert.equal(arr.length, 3);\nassert.equal(arr[0], 1);",
                  "err": {},
                  "uuid": "1c05d344-e19a-4c8d-91e9-d6730856e173",
                  "parentUUID": "9b8a0cff-91cd-464d-ad50-c23c2da5d5c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It is always preferable to use the literal syntax. It reads clearly and communicates our intent in a better way.",
                  "fullTitle": "Array Literal Syntax It is always preferable to use the literal syntax. It reads clearly and communicates our intent in a better way.",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "b1a77ee3-8387-4509-94ea-fd4d873eb1d4",
                  "parentUUID": "9b8a0cff-91cd-464d-ad50-c23c2da5d5c4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1c05d344-e19a-4c8d-91e9-d6730856e173",
                "b1a77ee3-8387-4509-94ea-fd4d873eb1d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "19a80f14-fe44-41f9-80fa-6a4eaec8237b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "32a14e6e-c47f-4503-8f66-d5049d860a47",
          "title": "Object",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\02_native-functions\\index_docs.js",
          "file": "\\src\\collection\\js-basics\\01_types\\02_native-functions\\index_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Object can be created by constructor form or literal syntax.",
              "fullTitle": "Object Object can be created by constructor form or literal syntax.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "553da337-be22-4db2-8fb4-751ecda227a7",
              "parentUUID": "32a14e6e-c47f-4503-8f66-d5049d860a47",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "d224fd19-e06d-4081-bd10-5a46ba5bfba5",
              "title": "Constructor Syntax",
              "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\02_native-functions\\index_docs.js",
              "file": "\\src\\collection\\js-basics\\01_types\\02_native-functions\\index_docs.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "In this form, object can be created by using new operator. Object parameters can be added or accessed by using dot operator obj.<parameterName> or square brackets [<parameterName>]",
                  "fullTitle": "Object Constructor Syntax In this form, object can be created by using new operator. Object parameters can be added or accessed by using dot operator obj.<parameterName> or square brackets [<parameterName>]",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var obj = new Object();\nobj.a = 1;\nobj['b'] = 2;\nobj.c = 3;\nassert.equal(typeof obj, 'object');\nassert.equal(obj.a, 1);\nassert.equal(obj['b'], 2);",
                  "err": {},
                  "uuid": "c329d571-067a-473e-9e92-5b361e59e30e",
                  "parentUUID": "d224fd19-e06d-4081-bd10-5a46ba5bfba5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Hence, it is better to avoid constructor syntax, as it is less performant.",
                  "fullTitle": "Object Constructor Syntax Hence, it is better to avoid constructor syntax, as it is less performant.",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "b41ffe2f-d05d-427a-a7c9-c0db1dccb9ac",
                  "parentUUID": "d224fd19-e06d-4081-bd10-5a46ba5bfba5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c329d571-067a-473e-9e92-5b361e59e30e",
                "b41ffe2f-d05d-427a-a7c9-c0db1dccb9ac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "199f3a6e-5fb4-4d5e-b4d2-42ec83a8f81c",
              "title": "Literal Syntax",
              "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\02_native-functions\\index_docs.js",
              "file": "\\src\\collection\\js-basics\\01_types\\02_native-functions\\index_docs.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "In this form, objects can be created by using curly braces {}",
                  "fullTitle": "Object Literal Syntax In this form, objects can be created by using curly braces {}",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var obj = {\n\t\t\ta: 1,\n\t\t\tb: 2,\n\t\t\tc: 3\n\t\t};\nassert.equal(typeof obj, 'object');\nassert.equal(obj['a'], 1);\nassert.equal(obj.b, 2);",
                  "err": {},
                  "uuid": "bbbb25fe-4b17-4f12-a005-d1e33dc90878",
                  "parentUUID": "199f3a6e-5fb4-4d5e-b4d2-42ec83a8f81c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It is always preferable to use the literal syntax. It reads clearly, communicates our intent in a better way and more performant.",
                  "fullTitle": "Object Literal Syntax It is always preferable to use the literal syntax. It reads clearly, communicates our intent in a better way and more performant.",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "f4f418f1-96bd-4c03-a0ed-1b804454b606",
                  "parentUUID": "199f3a6e-5fb4-4d5e-b4d2-42ec83a8f81c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bbbb25fe-4b17-4f12-a005-d1e33dc90878",
                "f4f418f1-96bd-4c03-a0ed-1b804454b606"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "553da337-be22-4db2-8fb4-751ecda227a7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fbce8e5b-274c-4741-80b3-b355bf26630e",
          "title": "RegExp",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\02_native-functions\\index_docs.js",
          "file": "\\src\\collection\\js-basics\\01_types\\02_native-functions\\index_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Regular Expression can be created by constructor form or literal syntax.",
              "fullTitle": "RegExp Regular Expression can be created by constructor form or literal syntax.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "14daee9c-40d0-47df-a2bf-8d7cdd988774",
              "parentUUID": "fbce8e5b-274c-4741-80b3-b355bf26630e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "d2213095-48fb-4e6d-b88e-2ff9854476f1",
              "title": "Constructor Syntax",
              "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\02_native-functions\\index_docs.js",
              "file": "\\src\\collection\\js-basics\\01_types\\02_native-functions\\index_docs.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "In this form, regular expression can be created by using new operator. The constructor form is useful if you want to create regular expression dynamically",
                  "fullTitle": "RegExp Constructor Syntax In this form, regular expression can be created by using new operator. The constructor form is useful if you want to create regular expression dynamically",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var pattern = new RegExp('^hello');\nassert.equal(typeof pattern, 'object');\nassert.equal(pattern.test('hello world!'), true);",
                  "err": {},
                  "uuid": "6eb97d20-128a-45f3-a417-b04f983506b9",
                  "parentUUID": "d2213095-48fb-4e6d-b88e-2ff9854476f1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6eb97d20-128a-45f3-a417-b04f983506b9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3b3455e7-03f7-46c7-9914-6def5840e621",
              "title": "Literal Syntax",
              "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\02_native-functions\\index_docs.js",
              "file": "\\src\\collection\\js-basics\\01_types\\02_native-functions\\index_docs.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "In this form, regular expression can be created by using double slashes /<Pattern>/",
                  "fullTitle": "RegExp Literal Syntax In this form, regular expression can be created by using double slashes /<Pattern>/",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var pattern = /^hello/;\nassert.equal(typeof pattern, 'object');\nassert.equal(pattern.test('hello world!'), true);",
                  "err": {},
                  "uuid": "b902e18e-a459-4ed4-9fb6-d43d3296105b",
                  "parentUUID": "3b3455e7-03f7-46c7-9914-6def5840e621",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It is always preferable to use the literal syntax. It reads clearly, communicates our intent in a better way and more performant.",
                  "fullTitle": "RegExp Literal Syntax It is always preferable to use the literal syntax. It reads clearly, communicates our intent in a better way and more performant.",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "ea4aa6f8-5ec8-4c35-975b-36214cab4e42",
                  "parentUUID": "3b3455e7-03f7-46c7-9914-6def5840e621",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b902e18e-a459-4ed4-9fb6-d43d3296105b",
                "ea4aa6f8-5ec8-4c35-975b-36214cab4e42"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "14daee9c-40d0-47df-a2bf-8d7cdd988774"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "17db7908-e295-43a8-9648-b3908381e4b9",
          "title": "Date",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\02_native-functions\\index_docs.js",
          "file": "\\src\\collection\\js-basics\\01_types\\02_native-functions\\index_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Date object can be created only by constructor form.",
              "fullTitle": "Date Date object can be created only by constructor form.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "e870fbd2-3bc5-4805-ac06-6169a22f94c8",
              "parentUUID": "17db7908-e295-43a8-9648-b3908381e4b9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e870fbd2-3bc5-4805-ac06-6169a22f94c8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "afff1a2b-acb6-4747-bc04-fec119ca4175",
          "title": "Function",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\02_native-functions\\index_docs.js",
          "file": "\\src\\collection\\js-basics\\01_types\\02_native-functions\\index_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Functions can be created by constructor form or literal syntax (as statement or expression).",
              "fullTitle": "Function Functions can be created by constructor form or literal syntax (as statement or expression).",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "3e0f37ab-5159-4ea9-923b-dc32c4104b9c",
              "parentUUID": "afff1a2b-acb6-4747-bc04-fec119ca4175",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3e0f37ab-5159-4ea9-923b-dc32c4104b9c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9990ffc4-d9a1-4a53-bf9e-3c8fc590b244",
          "title": "Special Values",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\03_special-values\\01_index_docs.js",
          "file": "\\src\\collection\\js-basics\\01_types\\03_special-values\\01_index_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Classified into\n\t\t\tNaN (Not a Number)\n\t\t\t+0\n\t\t\t-0\n\t\t\t+Infinity\n\t\t\t-Infinity\n\t\t\tnull\n\t\t\tundefined (void)\n\t\t\t",
              "fullTitle": "Special Values Classified into\n\t\t\tNaN (Not a Number)\n\t\t\t+0\n\t\t\t-0\n\t\t\t+Infinity\n\t\t\t-Infinity\n\t\t\tnull\n\t\t\tundefined (void)\n\t\t\t",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "ac0c968f-e7f9-410a-a3ba-18a0bafbbde9",
              "parentUUID": "9990ffc4-d9a1-4a53-bf9e-3c8fc590b244",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ac0c968f-e7f9-410a-a3ba-18a0bafbbde9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ab2a3930-7789-41ac-9628-3b3128217b80",
          "title": "NaN (Not a Number)",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\03_special-values\\01_index_docs.js",
          "file": "\\src\\collection\\js-basics\\01_types\\03_special-values\\01_index_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Whenever there is a numeric operation, if the operands are not number, the engine tries to convert it to a number. When the number conversion fails, it results in NaN. It is a special sentinel value, when the number conversion fails",
              "fullTitle": "NaN (Not a Number) Whenever there is a numeric operation, if the operands are not number, the engine tries to convert it to a number. When the number conversion fails, it results in NaN. It is a special sentinel value, when the number conversion fails",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var output = 'a' / 2;\nassert.equal(Number.isNaN(output), true);",
              "err": {},
              "uuid": "ba22aa2d-d761-41ac-9b5d-4fa0746487b6",
              "parentUUID": "ab2a3930-7789-41ac-9628-3b3128217b80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "typeof NaN is a number, because if we try to do numeric operation and ended in NaN, It is expected to be a number",
              "fullTitle": "NaN (Not a Number) typeof NaN is a number, because if we try to do numeric operation and ended in NaN, It is expected to be a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var output = 'a' / 2;\n\nassert.equal(typeof output, 'number');",
              "err": {},
              "uuid": "332f3415-a538-48d5-8c15-5197e97cf566",
              "parentUUID": "ab2a3930-7789-41ac-9628-3b3128217b80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "NaN when operated on any other operands will result in NaN",
              "fullTitle": "NaN (Not a Number) NaN when operated on any other operands will result in NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var a = 'a' * 2;\nvar output = a + 2;\nassert.equal(Number.isNaN(output), true);",
              "err": {},
              "uuid": "5721c781-fa89-4a43-a105-9c374db78e16",
              "parentUUID": "ab2a3930-7789-41ac-9628-3b3128217b80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It is the only value that is not equal to itself",
              "fullTitle": "NaN (Not a Number) It is the only value that is not equal to itself",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var a = 'a' * 2;\nvar output = a + 2;\nassert.notEqual(output, a);",
              "err": {},
              "uuid": "79cb55cd-1b5f-423d-bbba-0568317622c7",
              "parentUUID": "ab2a3930-7789-41ac-9628-3b3128217b80",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "3a0b2391-5b84-48ac-9fee-bc0a64898a28",
              "title": "Check for NaN",
              "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\03_special-values\\01_index_docs.js",
              "file": "\\src\\collection\\js-basics\\01_types\\03_special-values\\01_index_docs.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "983d6783-4a3f-4e8c-8450-d6d73411df0e",
                  "title": "Global isNaN Utility",
                  "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\03_special-values\\01_index_docs.js",
                  "file": "\\src\\collection\\js-basics\\01_types\\03_special-values\\01_index_docs.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "We need to have a way to check for NaN. It is by using global isNaN utility. But there is fatal flaw in this utility. isNaN before checking the value, it tries to converts the given value to a number and then checks to see if it resulted in NaN",
                      "fullTitle": "NaN (Not a Number) Check for NaN Global isNaN Utility We need to have a way to check for NaN. It is by using global isNaN utility. But there is fatal flaw in this utility. isNaN before checking the value, it tries to converts the given value to a number and then checks to see if it resulted in NaN",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "55d94ca3-dd9a-40f8-a6f1-b815ae78e8c0",
                      "parentUUID": "983d6783-4a3f-4e8c-8450-d6d73411df0e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "returns true when used isNaN on a string. While we may expect it to give false, as given a string, we expect that isNaN('<String Value>') to be false. But it first tries to convert the string into number, and it results in NaN, so it returns true",
                      "fullTitle": "NaN (Not a Number) Check for NaN Global isNaN Utility returns true when used isNaN on a string. While we may expect it to give false, as given a string, we expect that isNaN('<String Value>') to be false. But it first tries to convert the string into number, and it results in NaN, so it returns true",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.equal(isNaN('a'), true);",
                      "err": {},
                      "uuid": "e0b7a863-2432-430a-818f-0f2ce4fa37ec",
                      "parentUUID": "983d6783-4a3f-4e8c-8450-d6d73411df0e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "We could create a utility which works the way we think, by first checking if it is a number and then checking with isNaN utility",
                      "fullTitle": "NaN (Not a Number) Check for NaN Global isNaN Utility We could create a utility which works the way we think, by first checking if it is a number and then checking with isNaN utility",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "function isNaNCustom(x) {\n\treturn (\n\t\ttypeof x == 'number' &&\n\t\twindow.isNaN(x)\n\t);\n}\nassert.equal(isNaNCustom('a'), false);",
                      "err": {},
                      "uuid": "43d05df8-c9ea-4831-8c94-05bce1408d46",
                      "parentUUID": "983d6783-4a3f-4e8c-8450-d6d73411df0e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "We could also take advantage of the fact that NaN is the only value that is not equal to itself, to create the same utility",
                      "fullTitle": "NaN (Not a Number) Check for NaN Global isNaN Utility We could also take advantage of the fact that NaN is the only value that is not equal to itself, to create the same utility",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "function isNaNCustom(x) {\n\treturn x != x;\n}\nassert.equal(isNaNCustom('a'), false);",
                      "err": {},
                      "uuid": "a7647a8d-726c-4c27-9641-2ef6998b7c6e",
                      "parentUUID": "983d6783-4a3f-4e8c-8450-d6d73411df0e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "55d94ca3-dd9a-40f8-a6f1-b815ae78e8c0",
                    "e0b7a863-2432-430a-818f-0f2ce4fa37ec",
                    "43d05df8-c9ea-4831-8c94-05bce1408d46",
                    "a7647a8d-726c-4c27-9641-2ef6998b7c6e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "05ec8844-df55-48b2-9623-66dad789c463",
                  "title": "Number.isNaN Utility",
                  "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\03_special-values\\01_index_docs.js",
                  "file": "\\src\\collection\\js-basics\\01_types\\03_special-values\\01_index_docs.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Fortunately, we have Number.isNaN() utility (added in ES6 as polyfill), which checks for NaN without converting it to a number",
                      "fullTitle": "NaN (Not a Number) Check for NaN Number.isNaN Utility Fortunately, we have Number.isNaN() utility (added in ES6 as polyfill), which checks for NaN without converting it to a number",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "2681e960-5e46-46d2-b046-6fa148b00756",
                      "parentUUID": "05ec8844-df55-48b2-9623-66dad789c463",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "returns false when used Number.isNaN on a string",
                      "fullTitle": "NaN (Not a Number) Check for NaN Number.isNaN Utility returns false when used Number.isNaN on a string",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.equal(Number.isNaN('a'), false);",
                      "err": {},
                      "uuid": "eaabe10b-f4f8-49c2-b79f-156d8979c1d6",
                      "parentUUID": "05ec8844-df55-48b2-9623-66dad789c463",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2681e960-5e46-46d2-b046-6fa148b00756",
                    "eaabe10b-f4f8-49c2-b79f-156d8979c1d6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "41f91419-95a2-4509-a76c-738d0245654c",
                  "title": "Object.is Utility",
                  "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\03_special-values\\01_index_docs.js",
                  "file": "\\src\\collection\\js-basics\\01_types\\03_special-values\\01_index_docs.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Another way to check for NaN is to check with Object.is Utility",
                      "fullTitle": "NaN (Not a Number) Check for NaN Object.is Utility Another way to check for NaN is to check with Object.is Utility",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "39bcadce-a125-43e5-af34-66b6098d78ae",
                      "parentUUID": "41f91419-95a2-4509-a76c-738d0245654c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "returns true when checked with NaN",
                      "fullTitle": "NaN (Not a Number) Check for NaN Object.is Utility returns true when checked with NaN",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var output = 'a' / 2;\n\nassert.equal(Object.is(output, NaN), true);",
                      "err": {},
                      "uuid": "d373084d-0e76-4a48-9683-c004da724aed",
                      "parentUUID": "41f91419-95a2-4509-a76c-738d0245654c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "returns false when used Object.is on a string",
                      "fullTitle": "NaN (Not a Number) Check for NaN Object.is Utility returns false when used Object.is on a string",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.equal(Object.is('a', NaN), false);",
                      "err": {},
                      "uuid": "a7b9bd40-0c15-4e75-a104-63a2cde8a4b3",
                      "parentUUID": "41f91419-95a2-4509-a76c-738d0245654c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "39bcadce-a125-43e5-af34-66b6098d78ae",
                    "d373084d-0e76-4a48-9683-c004da724aed",
                    "a7b9bd40-0c15-4e75-a104-63a2cde8a4b3"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "ba22aa2d-d761-41ac-9b5d-4fa0746487b6",
            "332f3415-a538-48d5-8c15-5197e97cf566",
            "5721c781-fa89-4a43-a105-9c374db78e16",
            "79cb55cd-1b5f-423d-bbba-0568317622c7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "61563701-346a-498a-8f6a-a51f00ea8824",
          "title": "-0 (Negative Zero)",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\03_special-values\\01_index_docs.js",
          "file": "\\src\\collection\\js-basics\\01_types\\03_special-values\\01_index_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "The only way to get a negative zero (-0) would be to multiply or divide (0) by unary negate (-) operator. But we could not check for (-0) using the === operator, as we would see in the following examples",
              "fullTitle": "-0 (Negative Zero) The only way to get a negative zero (-0) would be to multiply or divide (0) by unary negate (-) operator. But we could not check for (-0) using the === operator, as we would see in the following examples",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "46742fd6-3091-4dbb-b9c7-9476e45768ae",
              "parentUUID": "61563701-346a-498a-8f6a-a51f00ea8824",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "We could check by doing (1 / (-0)) which should result in -Infinity",
              "fullTitle": "-0 (Negative Zero) We could check by doing (1 / (-0)) which should result in -Infinity",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "53ddbaa9-3785-44a3-9e90-d53d87146386",
              "parentUUID": "61563701-346a-498a-8f6a-a51f00ea8824",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "We could check by using Object.is utility",
              "fullTitle": "-0 (Negative Zero) We could check by using Object.is utility",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "5fd7682f-cf53-462f-b848-c002bf5b3e77",
              "parentUUID": "61563701-346a-498a-8f6a-a51f00ea8824",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "f6b2cb55-1abe-477b-aeee-b6b126635286",
              "title": "Check for (-0)",
              "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\03_special-values\\01_index_docs.js",
              "file": "\\src\\collection\\js-basics\\01_types\\03_special-values\\01_index_docs.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "79877c70-90e4-4607-a2f1-ea1634387868",
                  "title": "=== operator",
                  "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\03_special-values\\01_index_docs.js",
                  "file": "\\src\\collection\\js-basics\\01_types\\03_special-values\\01_index_docs.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns true if we check against (-0)",
                      "fullTitle": "-0 (Negative Zero) Check for (-0) === operator returns true if we check against (-0)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var a = 0 / -3;\nvar output = (a === -0);\nassert.equal(output, true);",
                      "err": {},
                      "uuid": "d2ce3315-2548-4a97-9319-e1ccb278c0da",
                      "parentUUID": "79877c70-90e4-4607-a2f1-ea1634387868",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Unfortunately, it returns true even if we check against (0)",
                      "fullTitle": "-0 (Negative Zero) Check for (-0) === operator Unfortunately, it returns true even if we check against (0)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var a = 0 / -3;\nvar output = (a === 0);\nassert.equal(output, true);",
                      "err": {},
                      "uuid": "8293b5b9-44f3-4f05-8527-febb3bbe661e",
                      "parentUUID": "79877c70-90e4-4607-a2f1-ea1634387868",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "It even returns true, when we check (0) to (-0)",
                      "fullTitle": "-0 (Negative Zero) Check for (-0) === operator It even returns true, when we check (0) to (-0)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var output = (0 === -0);\nassert.equal(output, true);",
                      "err": {},
                      "uuid": "6595348c-03e1-4b3e-9128-ec8175d052d2",
                      "parentUUID": "79877c70-90e4-4607-a2f1-ea1634387868",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d2ce3315-2548-4a97-9319-e1ccb278c0da",
                    "8293b5b9-44f3-4f05-8527-febb3bbe661e",
                    "6595348c-03e1-4b3e-9128-ec8175d052d2"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "a904a22e-c8a0-4562-9c74-f02e66f82f6e",
                  "title": "-Infinity",
                  "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\03_special-values\\01_index_docs.js",
                  "file": "\\src\\collection\\js-basics\\01_types\\03_special-values\\01_index_docs.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "returns true if we check against -Infinity by doing (1 / -0)",
                      "fullTitle": "-0 (Negative Zero) Check for (-0) -Infinity returns true if we check against -Infinity by doing (1 / -0)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var a = 0 / -3;\nvar output = 1 / a;\nassert.equal(output, -Infinity);",
                      "err": {},
                      "uuid": "44798276-f90f-4f4e-bee1-102af0a0198c",
                      "parentUUID": "a904a22e-c8a0-4562-9c74-f02e66f82f6e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "We could create a utility, that checks using === & -Infinity property",
                      "fullTitle": "-0 (Negative Zero) Check for (-0) -Infinity We could create a utility, that checks using === & -Infinity property",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "function isNegZero(x) {\n\treturn (\n\t\tx\t  === 0 &&\n\t\t(1/x) === -Infinity\n\t);\n}\nassert.equal(isNegZero(-0), true);",
                      "err": {},
                      "uuid": "43623bf3-0682-4ac5-bc91-8808fce5e7c7",
                      "parentUUID": "a904a22e-c8a0-4562-9c74-f02e66f82f6e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "44798276-f90f-4f4e-bee1-102af0a0198c",
                    "43623bf3-0682-4ac5-bc91-8808fce5e7c7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "fd699405-8648-4897-baee-8bfd70410a22",
                  "title": "Object.is Utility",
                  "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\03_special-values\\01_index_docs.js",
                  "file": "\\src\\collection\\js-basics\\01_types\\03_special-values\\01_index_docs.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Object.is Utility is like quadruple equals. It can be used to check -0 & NaN",
                      "fullTitle": "-0 (Negative Zero) Check for (-0) Object.is Utility Object.is Utility is like quadruple equals. It can be used to check -0 & NaN",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "19afaabd-5ba1-4da2-8f99-37cbccc2d8fb",
                      "parentUUID": "fd699405-8648-4897-baee-8bfd70410a22",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "returns true if we check with -0",
                      "fullTitle": "-0 (Negative Zero) Check for (-0) Object.is Utility returns true if we check with -0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var output = 0 / -3;\nassert.equal(Object.is(output, -0), true);",
                      "err": {},
                      "uuid": "37a2b727-e2be-425f-8ecc-b7c67de1179b",
                      "parentUUID": "fd699405-8648-4897-baee-8bfd70410a22",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "19afaabd-5ba1-4da2-8f99-37cbccc2d8fb",
                    "37a2b727-e2be-425f-8ecc-b7c67de1179b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "46742fd6-3091-4dbb-b9c7-9476e45768ae",
            "53ddbaa9-3785-44a3-9e90-d53d87146386",
            "5fd7682f-cf53-462f-b848-c002bf5b3e77"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "def4a1ad-960c-4d20-b0ca-8cfce22a57eb",
          "title": "Special Values Quiz",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\03_special-values\\02_examples_docs.js",
          "file": "\\src\\collection\\js-basics\\01_types\\03_special-values\\02_examples_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "In Javascript, there are two phases - compile & execution phase. During the compile phase, the declaration on LHS of = are compiled and references of all the variables are created in respective scopes. And then, In execution phase, RHS of = are executed and values are assigned to the variables in that scope.",
              "fullTitle": "Special Values Quiz In Javascript, there are two phases - compile & execution phase. During the compile phase, the declaration on LHS of = are compiled and references of all the variables are created in respective scopes. And then, In execution phase, RHS of = are executed and values are assigned to the variables in that scope.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "ccb07211-51a7-45e6-9280-19b36caa9a17",
              "parentUUID": "def4a1ad-960c-4d20-b0ca-8cfce22a57eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "In compile phase, all the variables to LHS of = will be compiled. when baz is again declared, it would have already created reference for baz, hence it will be ignored.",
              "fullTitle": "Special Values Quiz In compile phase, all the variables to LHS of = will be compiled. when baz is again declared, it would have already created reference for baz, hence it will be ignored.",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "d88e022e-cec2-4a46-8b78-708ddc82f583",
              "parentUUID": "def4a1ad-960c-4d20-b0ca-8cfce22a57eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "In execution phase, output1 is assigned typeof number, output1 should be 'number', as typeof number returns 'number'",
              "fullTitle": "Special Values Quiz In execution phase, output1 is assigned typeof number, output1 should be 'number', as typeof number returns 'number'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(output1, 'number');",
              "err": {},
              "uuid": "423e48ea-5f48-44f5-a47f-e704e7ee6371",
              "parentUUID": "def4a1ad-960c-4d20-b0ca-8cfce22a57eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Next, since that statement is ignored, output2 will be same as output1",
              "fullTitle": "Special Values Quiz Next, since that statement is ignored, output2 will be same as output1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(output2, 'number');",
              "err": {},
              "uuid": "5e6651ea-d185-4da6-aadc-f92437a697d6",
              "parentUUID": "def4a1ad-960c-4d20-b0ca-8cfce22a57eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Next, baz is assigned null and typeof null should return object (Note: This is bug in Javascript). Hence output3 will be equal to 'object'",
              "fullTitle": "Special Values Quiz Next, baz is assigned null and typeof null should return object (Note: This is bug in Javascript). Hence output3 will be equal to 'object'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(output3, 'object');",
              "err": {},
              "uuid": "bfc73128-ba49-4713-8196-ced8f28e76f9",
              "parentUUID": "def4a1ad-960c-4d20-b0ca-8cfce22a57eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Next, baz is assigned 'baz'*3. As (*) operator only works on numbers, it would try to convert 'baz' to a number, which would fail and result in NaN. Hence output4 will be NaN",
              "fullTitle": "Special Values Quiz Next, baz is assigned 'baz'*3. As (*) operator only works on numbers, it would try to convert 'baz' to a number, which would fail and result in NaN. Hence output4 will be NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(Number.isNaN(output4), true);",
              "err": {},
              "uuid": "0ab5c6a7-c1a5-4d5e-b7ef-883e691fa28a",
              "parentUUID": "def4a1ad-960c-4d20-b0ca-8cfce22a57eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Next then, typeof NaN would be assigned to output5, which would be 'number'",
              "fullTitle": "Special Values Quiz Next then, typeof NaN would be assigned to output5, which would be 'number'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(output5, 'number');",
              "err": {},
              "uuid": "a87c0fc1-f202-43ec-890a-8bfa35c9a567",
              "parentUUID": "def4a1ad-960c-4d20-b0ca-8cfce22a57eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Next, baz is assigned (1 / 0), which results in Infinity",
              "fullTitle": "Special Values Quiz Next, baz is assigned (1 / 0), which results in Infinity",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(output6, Infinity);",
              "err": {},
              "uuid": "fe7229cb-b088-4f08-b6d2-59f50c61fe52",
              "parentUUID": "def4a1ad-960c-4d20-b0ca-8cfce22a57eb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Next then, typeof Infinity is assigned to output7, which would be equal to 'number'",
              "fullTitle": "Special Values Quiz Next then, typeof Infinity is assigned to output7, which would be equal to 'number'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(output7, 'number');",
              "err": {},
              "uuid": "559149b3-ace4-4807-91d5-c62f275496df",
              "parentUUID": "def4a1ad-960c-4d20-b0ca-8cfce22a57eb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ccb07211-51a7-45e6-9280-19b36caa9a17",
            "d88e022e-cec2-4a46-8b78-708ddc82f583",
            "423e48ea-5f48-44f5-a47f-e704e7ee6371",
            "5e6651ea-d185-4da6-aadc-f92437a697d6",
            "bfc73128-ba49-4713-8196-ced8f28e76f9",
            "0ab5c6a7-c1a5-4d5e-b7ef-883e691fa28a",
            "a87c0fc1-f202-43ec-890a-8bfa35c9a567",
            "fe7229cb-b088-4f08-b6d2-59f50c61fe52",
            "559149b3-ace4-4807-91d5-c62f275496df"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b9fabeb8-f9e9-4e52-837b-307e2a357d2f",
          "title": "banana",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\03_special-values\\02_examples_docs.js",
          "file": "\\src\\collection\\js-basics\\01_types\\03_special-values\\02_examples_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 'banana' when the following expression is evaluated",
              "fullTitle": "banana should return 'banana' when the following expression is evaluated",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var output = ('b' + 'a' + + 'a' + 'a').toLowerCase();\nassert.equal(output, 'banana');",
              "err": {},
              "uuid": "6233c1a9-baff-4e80-a14e-b45c5e320de8",
              "parentUUID": "b9fabeb8-f9e9-4e52-837b-307e2a357d2f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "We are going to go step by step into how javascript evaluates this statement to banana, based on properties of NaN we learnt.",
              "fullTitle": "banana We are going to go step by step into how javascript evaluates this statement to banana, based on properties of NaN we learnt.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "0a1e8017-0e03-4264-a3a7-c738bfbadaec",
              "parentUUID": "b9fabeb8-f9e9-4e52-837b-307e2a357d2f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The last before 'a' is treated as unary addition. It cannot work on strings. So, it tries to coerce to number, which fails and results in NaN\n\tThe expression becomes 'b' + 'a' + NaN + 'a'\n\t\t\t",
              "fullTitle": "banana The last before 'a' is treated as unary addition. It cannot work on strings. So, it tries to coerce to number, which fails and results in NaN\n\tThe expression becomes 'b' + 'a' + NaN + 'a'\n\t\t\t",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "d48af876-dc03-4ed2-91e4-0279ad9315d0",
              "parentUUID": "b9fabeb8-f9e9-4e52-837b-307e2a357d2f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Then other expression leads us with string concatenation.\n\tThe expression becomes 'baNaNa'\n\t\t\t",
              "fullTitle": "banana Then other expression leads us with string concatenation.\n\tThe expression becomes 'baNaNa'\n\t\t\t",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "54a0ba28-e253-4c7a-932b-4044804352fd",
              "parentUUID": "b9fabeb8-f9e9-4e52-837b-307e2a357d2f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "The .toLowerCase() function is applied then.\n\tThe expression becomes 'banana'\n\t\t\t",
              "fullTitle": "banana The .toLowerCase() function is applied then.\n\tThe expression becomes 'banana'\n\t\t\t",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "b917ebda-8ee0-4b81-b94a-0e4902f884cc",
              "parentUUID": "b9fabeb8-f9e9-4e52-837b-307e2a357d2f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6233c1a9-baff-4e80-a14e-b45c5e320de8",
            "0a1e8017-0e03-4264-a3a7-c738bfbadaec",
            "d48af876-dc03-4ed2-91e4-0279ad9315d0",
            "54a0ba28-e253-4c7a-932b-4044804352fd",
            "b917ebda-8ee0-4b81-b94a-0e4902f884cc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a697891e-1fc1-411b-aba9-62058d66cecb",
          "title": "Cats Age",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\03_special-values\\02_examples_docs.js",
          "file": "\\src\\collection\\js-basics\\01_types\\03_special-values\\02_examples_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "First, myAge will convert the age to number, which is represented in octal form",
              "fullTitle": "Cats Age First, myAge will convert the age to number, which is represented in octal form",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "41d9d26c-9210-4012-9da8-312450b7c246",
              "parentUUID": "a697891e-1fc1-411b-aba9-62058d66cecb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Next, the string '39' is converted to number",
              "fullTitle": "Cats Age Next, the string '39' is converted to number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "8cc504b2-9615-48c8-bc82-ab132a8defa6",
              "parentUUID": "a697891e-1fc1-411b-aba9-62058d66cecb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Next, the string 'N/A' is converted to number. It fails and results in NaN",
              "fullTitle": "Cats Age Next, the string 'N/A' is converted to number. It fails and results in NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "c4d51c5f-58c5-4493-87d7-b917c72ddd29",
              "parentUUID": "a697891e-1fc1-411b-aba9-62058d66cecb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Next, myAge gets subtracted from string 'my son's age', which results in NaN",
              "fullTitle": "Cats Age Next, myAge gets subtracted from string 'my son's age', which results in NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(Number.isNaN(output1), true);",
              "err": {},
              "uuid": "8828b911-96cf-43ce-b2ef-dce43ad60355",
              "parentUUID": "a697891e-1fc1-411b-aba9-62058d66cecb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Next, typeof NaN is a number. NaN represents invalid number. So, the typeof NaN is always a number",
              "fullTitle": "Cats Age Next, typeof NaN is a number. NaN represents invalid number. So, the typeof NaN is always a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(output2, 'number');",
              "err": {},
              "uuid": "d14b981d-2d35-4c09-b406-97a888bc9c24",
              "parentUUID": "a697891e-1fc1-411b-aba9-62058d66cecb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Next, we compare NaN to itself. Since NaN is the only value, which is not equal to itself. we get false",
              "fullTitle": "Cats Age Next, we compare NaN to itself. Since NaN is the only value, which is not equal to itself. we get false",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(output3, false);",
              "err": {},
              "uuid": "c068a5ff-4f60-4d0e-9bd6-a44b93b7e8b9",
              "parentUUID": "a697891e-1fc1-411b-aba9-62058d66cecb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Next, we check for NaN using the global isNaN utility. When checked with a number, it results false",
              "fullTitle": "Cats Age Next, we check for NaN using the global isNaN utility. When checked with a number, it results false",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(output4, false);",
              "err": {},
              "uuid": "8eb424ef-fc34-42fd-8ccf-9a6445adcf46",
              "parentUUID": "a697891e-1fc1-411b-aba9-62058d66cecb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Next, we check for NaN, which results in true. Good!",
              "fullTitle": "Cats Age Next, we check for NaN, which results in true. Good!",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(output5, true);",
              "err": {},
              "uuid": "0ff4fe0d-9669-441a-b3e2-1ccc188d2674",
              "parentUUID": "a697891e-1fc1-411b-aba9-62058d66cecb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Next, we pass a normal string to check for NaN. Unfortunately it results in true. Because, before checking it tries to convert the passed value and then checks for NaN.",
              "fullTitle": "Cats Age Next, we pass a normal string to check for NaN. Unfortunately it results in true. Because, before checking it tries to convert the passed value and then checks for NaN.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(output6, true);",
              "err": {},
              "uuid": "9fd5216c-3cc0-47a0-ad22-4089bc9ec33e",
              "parentUUID": "a697891e-1fc1-411b-aba9-62058d66cecb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Fortunately, we got Number.isNaN to prevent from the mistakes above. When NaN is passed, it results true",
              "fullTitle": "Cats Age Fortunately, we got Number.isNaN to prevent from the mistakes above. When NaN is passed, it results true",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(output7, true);",
              "err": {},
              "uuid": "919371b9-acda-4be0-adda-1f33769ad28d",
              "parentUUID": "a697891e-1fc1-411b-aba9-62058d66cecb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "And if normal string is passed, it results false",
              "fullTitle": "Cats Age And if normal string is passed, it results false",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(output8, false);",
              "err": {},
              "uuid": "be4f49bc-1425-468f-b914-d0ec602cc3cb",
              "parentUUID": "a697891e-1fc1-411b-aba9-62058d66cecb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "41d9d26c-9210-4012-9da8-312450b7c246",
            "8cc504b2-9615-48c8-bc82-ab132a8defa6",
            "c4d51c5f-58c5-4493-87d7-b917c72ddd29",
            "8828b911-96cf-43ce-b2ef-dce43ad60355",
            "d14b981d-2d35-4c09-b406-97a888bc9c24",
            "c068a5ff-4f60-4d0e-9bd6-a44b93b7e8b9",
            "8eb424ef-fc34-42fd-8ccf-9a6445adcf46",
            "0ff4fe0d-9669-441a-b3e2-1ccc188d2674",
            "9fd5216c-3cc0-47a0-ad22-4089bc9ec33e",
            "919371b9-acda-4be0-adda-1f33769ad28d",
            "be4f49bc-1425-468f-b914-d0ec602cc3cb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c1156c6f-c76f-4024-a36b-7359c008f328",
          "title": "Trend Rate",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\03_special-values\\02_examples_docs.js",
          "file": "\\src\\collection\\js-basics\\01_types\\03_special-values\\02_examples_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "First, trendRate is assigned negative zero (-0)",
              "fullTitle": "Trend Rate First, trendRate is assigned negative zero (-0)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "e16c457b-811b-4ec1-9529-bf0711536e2a",
              "parentUUID": "c1156c6f-c76f-4024-a36b-7359c008f328",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Next, if we check with === -> it results true. Good",
              "fullTitle": "Trend Rate Next, if we check with === -> it results true. Good",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(output1, true);",
              "err": {},
              "uuid": "60f791c5-a80a-4426-98cd-a628b5737272",
              "parentUUID": "c1156c6f-c76f-4024-a36b-7359c008f328",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Next, when we try to convert to string, we get zero (weird!)",
              "fullTitle": "Trend Rate Next, when we try to convert to string, we get zero (weird!)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(output2, 0);",
              "err": {},
              "uuid": "61e8412b-45f3-47a9-9125-e14508d4d0b0",
              "parentUUID": "c1156c6f-c76f-4024-a36b-7359c008f328",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Next, when we check with (0), it results in true (Not Good!)",
              "fullTitle": "Trend Rate Next, when we check with (0), it results in true (Not Good!)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(output3, true);",
              "err": {},
              "uuid": "1e5d7d3c-6092-4f63-9f76-4e549e698ede",
              "parentUUID": "c1156c6f-c76f-4024-a36b-7359c008f328",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Next, again when checked < or >, it results in false. (-0) is neither greater than (0) or less than (0). Not Good again!",
              "fullTitle": "Trend Rate Next, again when checked < or >, it results in false. (-0) is neither greater than (0) or less than (0). Not Good again!",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(output4, false);\nassert.equal(output5, false);",
              "err": {},
              "uuid": "8eeb164a-e427-42ba-9ec2-e01b74f92e6b",
              "parentUUID": "c1156c6f-c76f-4024-a36b-7359c008f328",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Fortunately, we got Object.is to check for correct (-0) value. when passed (0) it returns false",
              "fullTitle": "Trend Rate Fortunately, we got Object.is to check for correct (-0) value. when passed (0) it returns false",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(output6, false);",
              "err": {},
              "uuid": "59538e8e-f7a2-4522-9bc0-841fed810398",
              "parentUUID": "c1156c6f-c76f-4024-a36b-7359c008f328",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Next, if we pass (-0), we get true. Good!",
              "fullTitle": "Trend Rate Next, if we pass (-0), we get true. Good!",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(output7, true);",
              "err": {},
              "uuid": "22ff46db-8ba2-417c-958d-7cbd4cc4d84a",
              "parentUUID": "c1156c6f-c76f-4024-a36b-7359c008f328",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e16c457b-811b-4ec1-9529-bf0711536e2a",
            "60f791c5-a80a-4426-98cd-a628b5737272",
            "61e8412b-45f3-47a9-9125-e14508d4d0b0",
            "1e5d7d3c-6092-4f63-9f76-4e549e698ede",
            "8eeb164a-e427-42ba-9ec2-e01b74f92e6b",
            "59538e8e-f7a2-4522-9bc0-841fed810398",
            "22ff46db-8ba2-417c-958d-7cbd4cc4d84a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "25422e41-4949-4f46-96df-c2fb21f2764e",
          "title": "check is",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\01_types\\03_special-values\\03_implement-object-is_docs.js",
          "file": "\\src\\collection\\js-basics\\01_types\\03_special-values\\03_implement-object-is_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "check for all possible corner cases",
              "fullTitle": "check is check for all possible corner cases",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(check.is(42, 42), true);\n\t\t\tassert.equal(check.is('foo', 'foo'), true);\n\t\t\tassert.equal(check.is(false, false), true);\n\t\t\tassert.equal(check.is(null, null), true);\n\t\t\tassert.equal(check.is(undefined, undefined), true);\n\t\t\tassert.equal(check.is(NaN, NaN), true);\n\t\t\tassert.equal(check.is(-0, -0), true);\n\t\t\tassert.equal(check.is(0, 0), true);\n\t\t\tassert.equal(check.is(-0, 0), false);\n\t\t\tassert.equal(check.is(0, -0), false);\n\t\t\tassert.equal(check.is(0, NaN), false);\n\t\t\tassert.equal(check.is(NaN, 0), false);\n\t\t\tassert.equal(check.is(42, '42'), false);\n\t\t\tassert.equal(check.is('42', 42), false);\n\t\t\tassert.equal(check.is('foo', 'bar'), false);\n\t\t\tassert.equal(check.is(false, true), false);\n\t\t\tassert.equal(check.is(null, undefined), false);\n\t\t\tassert.equal(check.is(undefined, null), false);",
              "err": {},
              "uuid": "951ca6cf-85dd-4c7d-bae1-65a032738e8f",
              "parentUUID": "25422e41-4949-4f46-96df-c2fb21f2764e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "951ca6cf-85dd-4c7d-bae1-65a032738e8f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0e32b0b0-b5cf-441f-ad2e-3cecfee320a4",
          "title": "Abstract Operations",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\01_abstract-operations\\index_docs.js",
          "file": "\\src\\collection\\js-basics\\02_coercion\\01_abstract-operations\\index_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Internally in Javascript, Whenever there is need for coercion, the abstract methods are dispatched to do the coercion. The following are some methods.",
              "fullTitle": "Abstract Operations Internally in Javascript, Whenever there is need for coercion, the abstract methods are dispatched to do the coercion. The following are some methods.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "5b583e88-9505-499b-b641-b5bd40399f6e",
              "parentUUID": "0e32b0b0-b5cf-441f-ad2e-3cecfee320a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ToString\n\t\t\tToNumber\n\t\t\tToBoolean\n\t\t",
              "fullTitle": "Abstract Operations ToString\n\t\t\tToNumber\n\t\t\tToBoolean\n\t\t",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "15563c68-2208-4b28-b901-178aafb55623",
              "parentUUID": "0e32b0b0-b5cf-441f-ad2e-3cecfee320a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It is important to note that, these methods are different from methods like toString (lowercase). Instead of getting into details like how these methods work, we can focus on what is end result of calling such abstract operations.",
              "fullTitle": "Abstract Operations It is important to note that, these methods are different from methods like toString (lowercase). Instead of getting into details like how these methods work, we can focus on what is end result of calling such abstract operations.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "d17a9ad7-f545-4847-a8f3-b676f6428de2",
              "parentUUID": "0e32b0b0-b5cf-441f-ad2e-3cecfee320a4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "eddadf19-cfe9-44d4-b85e-bc0b0f763885",
              "title": "ToString",
              "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\01_abstract-operations\\index_docs.js",
              "file": "\\src\\collection\\js-basics\\02_coercion\\01_abstract-operations\\index_docs.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "ToString method converts the given value to a string primitive. The following are some end results during the conversion.",
                  "fullTitle": "Abstract Operations ToString ToString method converts the given value to a string primitive. The following are some end results during the conversion.",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "f7ba5d92-5604-40bf-b2d9-15d92a7f1d5a",
                  "parentUUID": "eddadf19-cfe9-44d4-b85e-bc0b0f763885",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "a9445079-151e-4cc7-aeaa-ba4446808135",
                  "title": "ToString on Primitives",
                  "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\01_abstract-operations\\index_docs.js",
                  "file": "\\src\\collection\\js-basics\\02_coercion\\01_abstract-operations\\index_docs.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "null \t\t-> \t'null'\n\t\t\t\t\tundefined \t-> \t'undefined'\n\t\t\t\t\ttrue \t\t-> \t'true'\n\t\t\t\t\tfalse \t\t-> \t'false'\n\t\t\t\t\t3.1459 \t\t-> \t'3.1459'\n\t\t\t\t\t0 \t\t\t-> \t'0'\n\t\t\t\t\t-0 \t\t\t-> \t'0'\n\t\t\t\t",
                      "fullTitle": "Abstract Operations ToString ToString on Primitives null \t\t-> \t'null'\n\t\t\t\t\tundefined \t-> \t'undefined'\n\t\t\t\t\ttrue \t\t-> \t'true'\n\t\t\t\t\tfalse \t\t-> \t'false'\n\t\t\t\t\t3.1459 \t\t-> \t'3.1459'\n\t\t\t\t\t0 \t\t\t-> \t'0'\n\t\t\t\t\t-0 \t\t\t-> \t'0'\n\t\t\t\t",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "ba5c248b-70a2-4e2f-95c0-f481a25d464c",
                      "parentUUID": "a9445079-151e-4cc7-aeaa-ba4446808135",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "It is important to note that (-0) becomes ('0') because it internally tries to hide the fact that there is no negative zero.",
                      "fullTitle": "Abstract Operations ToString ToString on Primitives It is important to note that (-0) becomes ('0') because it internally tries to hide the fact that there is no negative zero.",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "406b5cb9-e842-4c27-b503-19e2e382c969",
                      "parentUUID": "a9445079-151e-4cc7-aeaa-ba4446808135",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ba5c248b-70a2-4e2f-95c0-f481a25d464c",
                    "406b5cb9-e842-4c27-b503-19e2e382c969"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "f2922324-8a1e-41c0-bd46-b4503ac5be73",
                  "title": "ToString on Non-Primitives",
                  "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\01_abstract-operations\\index_docs.js",
                  "file": "\\src\\collection\\js-basics\\02_coercion\\01_abstract-operations\\index_docs.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "ToString method when called on a non-primitive, dispatches the default toString method on the object or toString method which was defined by us.",
                      "fullTitle": "Abstract Operations ToString ToString on Non-Primitives ToString method when called on a non-primitive, dispatches the default toString method on the object or toString method which was defined by us.",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "a4d837ca-e47a-4ccd-a6f9-11c95bb0f2d8",
                      "parentUUID": "f2922324-8a1e-41c0-bd46-b4503ac5be73",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "When called on array or object, it calls ToPrimitive to convert the object into a primitive, and then it calls ToString abstract operation.",
                      "fullTitle": "Abstract Operations ToString ToString on Non-Primitives When called on array or object, it calls ToPrimitive to convert the object into a primitive, and then it calls ToString abstract operation.",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "263bd17a-3f7e-446e-ad30-451c48c96679",
                      "parentUUID": "f2922324-8a1e-41c0-bd46-b4503ac5be73",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "The following are some of the conversions in the default toString method when called on arrays.",
                      "fullTitle": "Abstract Operations ToString ToString on Non-Primitives The following are some of the conversions in the default toString method when called on arrays.",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "ca760344-eed4-4b68-8c70-9e24171bfb5a",
                      "parentUUID": "f2922324-8a1e-41c0-bd46-b4503ac5be73",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "[] \t\t\t\t\t-> \t''\n\t\t\t\t\t[1,2,3] \t\t\t-> \t'1,2,3'\n\t\t\t\t\t[null, undefined] \t-> \t','\n\t\t\t\t\t[ [ [],[],[] ], [] ]-> \t',,,'\n\t\t\t\t\t[,,,,] \t\t\t\t-> \t',,,'\n\t\t\t\t",
                      "fullTitle": "Abstract Operations ToString ToString on Non-Primitives [] \t\t\t\t\t-> \t''\n\t\t\t\t\t[1,2,3] \t\t\t-> \t'1,2,3'\n\t\t\t\t\t[null, undefined] \t-> \t','\n\t\t\t\t\t[ [ [],[],[] ], [] ]-> \t',,,'\n\t\t\t\t\t[,,,,] \t\t\t\t-> \t',,,'\n\t\t\t\t",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "1e6702d6-2864-42a6-b165-0f889aebb43b",
                      "parentUUID": "f2922324-8a1e-41c0-bd46-b4503ac5be73",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "It is counter-intuitive for us to think that [] becomes ''. We do not know if that came from empty string or array. It could have become '[]' string with array symbol, but it does not. Similarly array with [1,2,3] becomes '1,2,3', which could have become '[1,2,3]' with the square brackets, but it does not (weird but important!)",
                      "fullTitle": "Abstract Operations ToString ToString on Non-Primitives It is counter-intuitive for us to think that [] becomes ''. We do not know if that came from empty string or array. It could have become '[]' string with array symbol, but it does not. Similarly array with [1,2,3] becomes '1,2,3', which could have become '[1,2,3]' with the square brackets, but it does not (weird but important!)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "df4dbeab-0b0d-47ad-81de-ec6dff59d894",
                      "parentUUID": "f2922324-8a1e-41c0-bd46-b4503ac5be73",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "More importantly, when null & undefined are individually stringified, it becomes 'null' & 'undefined', but when in an array, it becomes ',' (weird!)",
                      "fullTitle": "Abstract Operations ToString ToString on Non-Primitives More importantly, when null & undefined are individually stringified, it becomes 'null' & 'undefined', but when in an array, it becomes ',' (weird!)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "c8ff3e52-c6b5-47fd-b96b-9f99340426ce",
                      "parentUUID": "f2922324-8a1e-41c0-bd46-b4503ac5be73",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "In Arrays, trailing commas are allowed, hence [,,,,] becomes ',,,'",
                      "fullTitle": "Abstract Operations ToString ToString on Non-Primitives In Arrays, trailing commas are allowed, hence [,,,,] becomes ',,,'",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "9fcc34c5-4bbd-46f3-800c-6cbc9ee640e9",
                      "parentUUID": "f2922324-8a1e-41c0-bd46-b4503ac5be73",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "The following are some of the conversions in the default toString method when called on objects.",
                      "fullTitle": "Abstract Operations ToString ToString on Non-Primitives The following are some of the conversions in the default toString method when called on objects.",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "7345aa9c-78c7-4a3f-8fe5-4e16841376d9",
                      "parentUUID": "f2922324-8a1e-41c0-bd46-b4503ac5be73",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "{}\t\t-> \t'[object Object]'\n\t\t\t\t\t{a:2} \t-> \t'[object Object]'\n\t\t\t\t",
                      "fullTitle": "Abstract Operations ToString ToString on Non-Primitives {}\t\t-> \t'[object Object]'\n\t\t\t\t\t{a:2} \t-> \t'[object Object]'\n\t\t\t\t",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "86f8947b-1eb6-414c-9ab0-ef47e5dce32e",
                      "parentUUID": "f2922324-8a1e-41c0-bd46-b4503ac5be73",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "During conversion, the contents of the objects are not shown.",
                      "fullTitle": "Abstract Operations ToString ToString on Non-Primitives During conversion, the contents of the objects are not shown.",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "185e4d75-f8bc-43f0-a7f8-4bc1be26a3e7",
                      "parentUUID": "f2922324-8a1e-41c0-bd46-b4503ac5be73",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "The Object (uppercase) can be changed using ES6 meta programming, Refer ES6 Right parts course for more information.",
                      "fullTitle": "Abstract Operations ToString ToString on Non-Primitives The Object (uppercase) can be changed using ES6 meta programming, Refer ES6 Right parts course for more information.",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "16a3fd6b-3fd9-4dce-887c-42c9ae04ea55",
                      "parentUUID": "f2922324-8a1e-41c0-bd46-b4503ac5be73",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [
                    {
                      "uuid": "f648fdd8-2b2d-4355-8e53-7fb418503602",
                      "title": "ToPrimitive",
                      "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\01_abstract-operations\\index_docs.js",
                      "file": "\\src\\collection\\js-basics\\02_coercion\\01_abstract-operations\\index_docs.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "When ToPrimitive is called on an object, the following methods are called in the specific order,\n\t\t\t\t\t\t\t1. toString()\n\t\t\t\t\t\t\t2. valueOf()\n\n\t\t\t\t\t\tIf the first method does not return a primitive, then it calls the second method.\n\t\t\t\t\t",
                          "fullTitle": "Abstract Operations ToString ToString on Non-Primitives ToPrimitive When ToPrimitive is called on an object, the following methods are called in the specific order,\n\t\t\t\t\t\t\t1. toString()\n\t\t\t\t\t\t\t2. valueOf()\n\n\t\t\t\t\t\tIf the first method does not return a primitive, then it calls the second method.\n\t\t\t\t\t",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "d98c33eb-56b4-45a8-9671-05f10978967d",
                          "parentUUID": "f648fdd8-2b2d-4355-8e53-7fb418503602",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "d98c33eb-56b4-45a8-9671-05f10978967d"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 2000
                    }
                  ],
                  "passes": [
                    "a4d837ca-e47a-4ccd-a6f9-11c95bb0f2d8",
                    "263bd17a-3f7e-446e-ad30-451c48c96679",
                    "ca760344-eed4-4b68-8c70-9e24171bfb5a",
                    "1e6702d6-2864-42a6-b165-0f889aebb43b",
                    "df4dbeab-0b0d-47ad-81de-ec6dff59d894",
                    "c8ff3e52-c6b5-47fd-b96b-9f99340426ce",
                    "9fcc34c5-4bbd-46f3-800c-6cbc9ee640e9",
                    "7345aa9c-78c7-4a3f-8fe5-4e16841376d9",
                    "86f8947b-1eb6-414c-9ab0-ef47e5dce32e",
                    "185e4d75-f8bc-43f0-a7f8-4bc1be26a3e7",
                    "16a3fd6b-3fd9-4dce-887c-42c9ae04ea55"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "f7ba5d92-5604-40bf-b2d9-15d92a7f1d5a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b7145e0c-7f97-4ccd-b433-212f5a6d0987",
              "title": "ToNumber",
              "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\01_abstract-operations\\index_docs.js",
              "file": "\\src\\collection\\js-basics\\02_coercion\\01_abstract-operations\\index_docs.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "ToNumber method converts the given value to a number primitive. The following are some end results during the conversion.",
                  "fullTitle": "Abstract Operations ToNumber ToNumber method converts the given value to a number primitive. The following are some end results during the conversion.",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "5ac31edf-e110-4e25-a88b-c3b80b6d0e7d",
                  "parentUUID": "b7145e0c-7f97-4ccd-b433-212f5a6d0987",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "13a4ba62-daa4-43d9-9564-a74516265204",
                  "title": "ToNumber on string primitive",
                  "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\01_abstract-operations\\index_docs.js",
                  "file": "\\src\\collection\\js-basics\\02_coercion\\01_abstract-operations\\index_docs.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "'' \t\t-> \t0\n\t\t\t\t\t'0' \t\t-> \t0\n\t\t\t\t\t'-0' \t\t-> \t-0\n\t\t\t\t\t'  009  ' \t-> \t9\n\t\t\t\t\t'3.1459' \t-> \t3.1459\n\t\t\t\t\t'0.' \t\t-> \t0\n\t\t\t\t\t'.0' \t\t-> \t0\n\t\t\t\t\t'.' \t\t-> \tNaN\n\t\t\t\t\t'0xaf' \t\t-> \t175\n\t\t\t\t",
                      "fullTitle": "Abstract Operations ToNumber ToNumber on string primitive '' \t\t-> \t0\n\t\t\t\t\t'0' \t\t-> \t0\n\t\t\t\t\t'-0' \t\t-> \t-0\n\t\t\t\t\t'  009  ' \t-> \t9\n\t\t\t\t\t'3.1459' \t-> \t3.1459\n\t\t\t\t\t'0.' \t\t-> \t0\n\t\t\t\t\t'.0' \t\t-> \t0\n\t\t\t\t\t'.' \t\t-> \tNaN\n\t\t\t\t\t'0xaf' \t\t-> \t175\n\t\t\t\t",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "78894857-a32b-4d98-81f9-53519b3dfcdb",
                      "parentUUID": "13a4ba62-daa4-43d9-9564-a74516265204",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Refer JS Deep Foundations course for more information.",
                      "fullTitle": "Abstract Operations ToNumber ToNumber on string primitive Refer JS Deep Foundations course for more information.",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "a352050e-9751-4538-b33f-2ddfa7fdc517",
                      "parentUUID": "13a4ba62-daa4-43d9-9564-a74516265204",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "78894857-a32b-4d98-81f9-53519b3dfcdb",
                    "a352050e-9751-4538-b33f-2ddfa7fdc517"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "5720d847-1744-407e-8bc1-f6637687534b",
                  "title": "ToNumber on boolean, null, undefined",
                  "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\01_abstract-operations\\index_docs.js",
                  "file": "\\src\\collection\\js-basics\\02_coercion\\01_abstract-operations\\index_docs.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "false \t\t-> \t0\n\t\t\t\t\ttrue \t\t-> \t1\n\t\t\t\t\tnull \t\t-> \t0\n\t\t\t\t\tundefined \t-> \tNaN\n\t\t\t\t",
                      "fullTitle": "Abstract Operations ToNumber ToNumber on boolean, null, undefined false \t\t-> \t0\n\t\t\t\t\ttrue \t\t-> \t1\n\t\t\t\t\tnull \t\t-> \t0\n\t\t\t\t\tundefined \t-> \tNaN\n\t\t\t\t",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "23497c63-8b9a-41e2-800e-7054354e1f46",
                      "parentUUID": "5720d847-1744-407e-8bc1-f6637687534b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Refer JS Deep Foundations course for more information.",
                      "fullTitle": "Abstract Operations ToNumber ToNumber on boolean, null, undefined Refer JS Deep Foundations course for more information.",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "3c916d2d-19c0-43aa-b504-12d6335a0615",
                      "parentUUID": "5720d847-1744-407e-8bc1-f6637687534b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "23497c63-8b9a-41e2-800e-7054354e1f46",
                    "3c916d2d-19c0-43aa-b504-12d6335a0615"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "c64e3d23-4340-41bf-b72b-710ce8cea363",
                  "title": "ToNumber on array or object",
                  "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\01_abstract-operations\\index_docs.js",
                  "file": "\\src\\collection\\js-basics\\02_coercion\\01_abstract-operations\\index_docs.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "When called on array or object, it calls ToPrimitive to convert the object into a primitive, and then it calls ToNumber abstract operation.",
                      "fullTitle": "Abstract Operations ToNumber ToNumber on array or object When called on array or object, it calls ToPrimitive to convert the object into a primitive, and then it calls ToNumber abstract operation.",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "79ee5018-d0be-4dce-9057-a70448cf735a",
                      "parentUUID": "c64e3d23-4340-41bf-b72b-710ce8cea363",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "The following are some of the conversions for arrays by ToNumber abstract operation",
                      "fullTitle": "Abstract Operations ToNumber ToNumber on array or object The following are some of the conversions for arrays by ToNumber abstract operation",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "5765520b-f525-42f2-ba58-021fa1cca750",
                      "parentUUID": "c64e3d23-4340-41bf-b72b-710ce8cea363",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "[''] \t\t-> \t0\n\t\t\t\t\t['0'] \t\t-> \t0\n\t\t\t\t\t['-0'] \t\t-> \t-0\n\t\t\t\t\t[null] \t\t-> \t0\n\t\t\t\t\t[undefined] -> \t0\n\t\t\t\t\t[1,2,3] \t-> \tNaN\n\t\t\t\t\t[[[[]]]] \t-> \t0\n\t\t\t\t",
                      "fullTitle": "Abstract Operations ToNumber ToNumber on array or object [''] \t\t-> \t0\n\t\t\t\t\t['0'] \t\t-> \t0\n\t\t\t\t\t['-0'] \t\t-> \t-0\n\t\t\t\t\t[null] \t\t-> \t0\n\t\t\t\t\t[undefined] -> \t0\n\t\t\t\t\t[1,2,3] \t-> \tNaN\n\t\t\t\t\t[[[[]]]] \t-> \t0\n\t\t\t\t",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "05e18fb0-24a5-403c-962a-23dba941a94f",
                      "parentUUID": "c64e3d23-4340-41bf-b72b-710ce8cea363",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Refer JS Deep Foundations course for more information.",
                      "fullTitle": "Abstract Operations ToNumber ToNumber on array or object Refer JS Deep Foundations course for more information.",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "29ab579e-6f07-4184-a1b8-67d391d98079",
                      "parentUUID": "c64e3d23-4340-41bf-b72b-710ce8cea363",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [
                    {
                      "uuid": "bd20cb13-447c-479e-8c17-8e56bc09d21a",
                      "title": "ToPrimitive",
                      "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\01_abstract-operations\\index_docs.js",
                      "file": "\\src\\collection\\js-basics\\02_coercion\\01_abstract-operations\\index_docs.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "When ToPrimitive is called on an object, the following methods are called in the specific order,\n\t\t\t\t\t\t\t1. valueOf()\n\t\t\t\t\t\t\t2. toString()\n\n\t\t\t\t\t\tIf the first method does not return a primitive, then it calls the second method.\n\t\t\t\t\t",
                          "fullTitle": "Abstract Operations ToNumber ToNumber on array or object ToPrimitive When ToPrimitive is called on an object, the following methods are called in the specific order,\n\t\t\t\t\t\t\t1. valueOf()\n\t\t\t\t\t\t\t2. toString()\n\n\t\t\t\t\t\tIf the first method does not return a primitive, then it calls the second method.\n\t\t\t\t\t",
                          "timedOut": false,
                          "duration": 0,
                          "state": "passed",
                          "speed": "fast",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "",
                          "err": {},
                          "uuid": "c8fa2d2d-af64-4459-9c2c-030f90e9286a",
                          "parentUUID": "bd20cb13-447c-479e-8c17-8e56bc09d21a",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "c8fa2d2d-af64-4459-9c2c-030f90e9286a"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 0,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 2000
                    }
                  ],
                  "passes": [
                    "79ee5018-d0be-4dce-9057-a70448cf735a",
                    "5765520b-f525-42f2-ba58-021fa1cca750",
                    "05e18fb0-24a5-403c-962a-23dba941a94f",
                    "29ab579e-6f07-4184-a1b8-67d391d98079"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "5ac31edf-e110-4e25-a88b-c3b80b6d0e7d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "227275ab-f736-46ba-a1bf-be7d7d675343",
              "title": "ToBoolean",
              "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\01_abstract-operations\\index_docs.js",
              "file": "\\src\\collection\\js-basics\\02_coercion\\01_abstract-operations\\index_docs.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "ToBoolean method converts the given value to a boolean primitive. To understand what ToBoolean does, we need to understand truthy and falsy values.",
                  "fullTitle": "Abstract Operations ToBoolean ToBoolean method converts the given value to a boolean primitive. To understand what ToBoolean does, we need to understand truthy and falsy values.",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "9fd8d1c8-1a90-48a6-8042-bc1e760d1cc9",
                  "parentUUID": "227275ab-f736-46ba-a1bf-be7d7d675343",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "When ToBoolean abstract operation is called, the following values results in false boolean primitive\n\t\t\t\t'', \"\", ``\n\t\t\t\t0, +0, -0\n\t\t\t\tnull\n\t\t\t\tNaN\n\t\t\t\tfalse\n\t\t\t\tundefined\n\t\t\t",
                  "fullTitle": "Abstract Operations ToBoolean When ToBoolean abstract operation is called, the following values results in false boolean primitive\n\t\t\t\t'', \"\", ``\n\t\t\t\t0, +0, -0\n\t\t\t\tnull\n\t\t\t\tNaN\n\t\t\t\tfalse\n\t\t\t\tundefined\n\t\t\t",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "66be5508-6ced-4e9c-9407-0d99b58b8904",
                  "parentUUID": "227275ab-f736-46ba-a1bf-be7d7d675343",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "All the OTHER values except the above values converts to true boolean primitive, when ToBoolean abstract operation is called. So If we need to know whether something is truthy, check it in the falsy list, If it is not there - then it is truthy",
                  "fullTitle": "Abstract Operations ToBoolean All the OTHER values except the above values converts to true boolean primitive, when ToBoolean abstract operation is called. So If we need to know whether something is truthy, check it in the falsy list, If it is not there - then it is truthy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "cfdab892-0cfd-4d06-a448-b8340ee53646",
                  "parentUUID": "227275ab-f736-46ba-a1bf-be7d7d675343",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9fd8d1c8-1a90-48a6-8042-bc1e760d1cc9",
                "66be5508-6ced-4e9c-9407-0d99b58b8904",
                "cfdab892-0cfd-4d06-a448-b8340ee53646"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "5b583e88-9505-499b-b641-b5bd40399f6e",
            "15563c68-2208-4b28-b901-178aafb55623",
            "d17a9ad7-f545-4847-a8f3-b676f6428de2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3529cabc-4b48-44f6-81fe-469ef064e136",
          "title": "Coercion Types",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\02_types\\01_index_docs.js",
          "file": "\\src\\collection\\js-basics\\02_coercion\\02_types\\01_index_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Coercion can be categorized into explicit & implicit. More importantly, it is a style. We can't decide that explicit is good & implicit is bad. There are two mechanisms which can be used. The decision lies in the fact that the code should be more readable & understandable by all (or most) developers.",
              "fullTitle": "Coercion Types Coercion can be categorized into explicit & implicit. More importantly, it is a style. We can't decide that explicit is good & implicit is bad. There are two mechanisms which can be used. The decision lies in the fact that the code should be more readable & understandable by all (or most) developers.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "4b8d6ab2-4e64-4c5a-b46b-8422da99fd92",
              "parentUUID": "3529cabc-4b48-44f6-81fe-469ef064e136",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "We are going to go step by step into how javascript evaluates this statement to true.",
              "fullTitle": "Coercion Types We are going to go step by step into how javascript evaluates this statement to true.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "522cdbbc-a4f9-4126-9d4e-cf827e2c7eba",
              "parentUUID": "3529cabc-4b48-44f6-81fe-469ef064e136",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4b8d6ab2-4e64-4c5a-b46b-8422da99fd92",
            "522cdbbc-a4f9-4126-9d4e-cf827e2c7eba"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "adc2969c-722f-4738-b798-f92f3a194698",
          "title": "Explicit Coercion",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\02_types\\02-a_explicit-coercion_docs.js",
          "file": "\\src\\collection\\js-basics\\02_coercion\\02_types\\02-a_explicit-coercion_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Explicit Coercion implies that it is obvious from the code that we are trying to do the coercion.",
              "fullTitle": "Explicit Coercion Explicit Coercion implies that it is obvious from the code that we are trying to do the coercion.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "454bec62-797d-460a-9f31-494862594f0a",
              "parentUUID": "adc2969c-722f-4738-b798-f92f3a194698",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Of all the methods mentioned below, using the Native Function for conversion should be preferred, as it cleaner & communicates our intent clearly.",
              "fullTitle": "Explicit Coercion Of all the methods mentioned below, using the Native Function for conversion should be preferred, as it cleaner & communicates our intent clearly.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "251eab4c-10cb-4b0e-95af-cd3dfcb75834",
              "parentUUID": "adc2969c-722f-4738-b798-f92f3a194698",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "51623f97-6d30-4216-9877-6ca7479bacb3",
              "title": "string -> number",
              "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\02_types\\02-a_explicit-coercion_docs.js",
              "file": "\\src\\collection\\js-basics\\02_coercion\\02_types\\02-a_explicit-coercion_docs.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "We have a lot of use cases for converting string into number. There are a couple of ways to do it.",
                  "fullTitle": "Explicit Coercion string -> number We have a lot of use cases for converting string into number. There are a couple of ways to do it.",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "fcda0b41-08ec-4790-8776-0d846679366e",
                  "parentUUID": "51623f97-6d30-4216-9877-6ca7479bacb3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "42458904-13a7-48a9-b096-32e3dfbb48a8",
                  "title": "parseInt",
                  "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\02_types\\02-a_explicit-coercion_docs.js",
                  "file": "\\src\\collection\\js-basics\\02_coercion\\02_types\\02-a_explicit-coercion_docs.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "parseInt is generally used in javascript to convert the given string into a number. But it is quite different from directly coercing the given value.",
                      "fullTitle": "Explicit Coercion string -> number parseInt parseInt is generally used in javascript to convert the given string into a number. But it is quite different from directly coercing the given value.",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "9ea6aa33-c747-4bda-87aa-bd3e09e604ad",
                      "parentUUID": "42458904-13a7-48a9-b096-32e3dfbb48a8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "It literally parses the given value from left to right to find the numerical characters & stops when a non-numerical character starts. For Eg: when we give it a string '123px', it starts from left to right to collect the input and immediately stops once the parser hits the letter 'p'.",
                      "fullTitle": "Explicit Coercion string -> number parseInt It literally parses the given value from left to right to find the numerical characters & stops when a non-numerical character starts. For Eg: when we give it a string '123px', it starts from left to right to collect the input and immediately stops once the parser hits the letter 'p'.",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "d111a7a5-1af7-44c6-b327-da2449a88dfb",
                      "parentUUID": "42458904-13a7-48a9-b096-32e3dfbb48a8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "This mechanism may result in unpredictable or undesirable results.",
                      "fullTitle": "Explicit Coercion string -> number parseInt This mechanism may result in unpredictable or undesirable results.",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "8847a616-e7a3-4e50-b39c-f5a1ad5b0117",
                      "parentUUID": "42458904-13a7-48a9-b096-32e3dfbb48a8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "It parses and converts '123px' to number primitive 123",
                      "fullTitle": "Explicit Coercion string -> number parseInt It parses and converts '123px' to number primitive 123",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var a = '123px';\nvar output = parseInt(a, 10);\nassert.equal(typeof output, 'number');\nassert.equal(output, 123);",
                      "err": {},
                      "uuid": "317253d0-b62d-42cc-95bc-a8c96531a569",
                      "parentUUID": "42458904-13a7-48a9-b096-32e3dfbb48a8",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9ea6aa33-c747-4bda-87aa-bd3e09e604ad",
                    "d111a7a5-1af7-44c6-b327-da2449a88dfb",
                    "8847a616-e7a3-4e50-b39c-f5a1ad5b0117",
                    "317253d0-b62d-42cc-95bc-a8c96531a569"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "099e8609-8a93-4891-a230-4642004c075f",
                  "title": "Number() Native Function",
                  "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\02_types\\02-a_explicit-coercion_docs.js",
                  "file": "\\src\\collection\\js-basics\\02_coercion\\02_types\\02-a_explicit-coercion_docs.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Unlike parseInt, it is either convert or not convert at all. There is no parsing like parseInt. When the conversion fails it results in NaN.",
                      "fullTitle": "Explicit Coercion string -> number Number() Native Function Unlike parseInt, it is either convert or not convert at all. There is no parsing like parseInt. When the conversion fails it results in NaN.",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "3751d019-d661-4da7-b554-3346e8e0fd6b",
                      "parentUUID": "099e8609-8a93-4891-a230-4642004c075f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "when given a value like '123px', it fails and results in NaN",
                      "fullTitle": "Explicit Coercion string -> number Number() Native Function when given a value like '123px', it fails and results in NaN",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var a = '123px';\nvar output = Number(a);\nassert.equal(Number.isNaN(output), true);",
                      "err": {},
                      "uuid": "e83f5132-3349-4f39-9f06-c5da5d17b589",
                      "parentUUID": "099e8609-8a93-4891-a230-4642004c075f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "It can be used to convert a given value into a number primitive, and it runs the ToNumber abstract operation.",
                      "fullTitle": "Explicit Coercion string -> number Number() Native Function It can be used to convert a given value into a number primitive, and it runs the ToNumber abstract operation.",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "b3d92a23-fdd9-4507-958d-a5f8572c25bf",
                      "parentUUID": "099e8609-8a93-4891-a230-4642004c075f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "successfully converts the given value to a number primitive",
                      "fullTitle": "Explicit Coercion string -> number Number() Native Function successfully converts the given value to a number primitive",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var a = '123';\nvar output = Number(a);\nassert.equal(typeof output, 'number');\nassert.equal(output, 123);",
                      "err": {},
                      "uuid": "cff2e185-037f-446b-9e3f-3e1f6f3dbf63",
                      "parentUUID": "099e8609-8a93-4891-a230-4642004c075f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3751d019-d661-4da7-b554-3346e8e0fd6b",
                    "e83f5132-3349-4f39-9f06-c5da5d17b589",
                    "b3d92a23-fdd9-4507-958d-a5f8572c25bf",
                    "cff2e185-037f-446b-9e3f-3e1f6f3dbf63"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "9d76555a-ab5c-44a3-9126-7c92c08a1ec5",
                  "title": "Unary (+) operator",
                  "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\02_types\\02-a_explicit-coercion_docs.js",
                  "file": "\\src\\collection\\js-basics\\02_coercion\\02_types\\02-a_explicit-coercion_docs.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "The Unary (+) operator when operated on operands tries to convert it to number primitive by running the ToNumber abstract operation.",
                      "fullTitle": "Explicit Coercion string -> number Unary (+) operator The Unary (+) operator when operated on operands tries to convert it to number primitive by running the ToNumber abstract operation.",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "8209c122-7bef-4ee8-9da3-d2df77190a5e",
                      "parentUUID": "9d76555a-ab5c-44a3-9126-7c92c08a1ec5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "It may not look like explicit, Maybe we think of it as explicitly implicit.",
                      "fullTitle": "Explicit Coercion string -> number Unary (+) operator It may not look like explicit, Maybe we think of it as explicitly implicit.",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "8bcee4ec-125e-4ac8-82a0-26e3541a6611",
                      "parentUUID": "9d76555a-ab5c-44a3-9126-7c92c08a1ec5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "converts the given value to a number primitive",
                      "fullTitle": "Explicit Coercion string -> number Unary (+) operator converts the given value to a number primitive",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var a = '123';\nvar output = +a;\nassert.equal(typeof output, 'number');\nassert.equal(output, 123);",
                      "err": {},
                      "uuid": "541d9ab5-2516-426f-9eba-a22b7b0e6216",
                      "parentUUID": "9d76555a-ab5c-44a3-9126-7c92c08a1ec5",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8209c122-7bef-4ee8-9da3-d2df77190a5e",
                    "8bcee4ec-125e-4ac8-82a0-26e3541a6611",
                    "541d9ab5-2516-426f-9eba-a22b7b0e6216"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "fcda0b41-08ec-4790-8776-0d846679366e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "59d76361-f95e-4e5d-9018-d810c410a9f2",
              "title": "number -> string",
              "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\02_types\\02-a_explicit-coercion_docs.js",
              "file": "\\src\\collection\\js-basics\\02_coercion\\02_types\\02-a_explicit-coercion_docs.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "We have a lot of use cases for converting number into string. There are a couple of ways to do it.",
                  "fullTitle": "Explicit Coercion number -> string We have a lot of use cases for converting number into string. There are a couple of ways to do it.",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "ff82e6dd-76e4-4f8d-a2d8-d67d5fbc8efa",
                  "parentUUID": "59d76361-f95e-4e5d-9018-d810c410a9f2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "5ffb035e-c8c8-479c-87c7-983d7a698b2d",
                  "title": "toString",
                  "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\02_types\\02-a_explicit-coercion_docs.js",
                  "file": "\\src\\collection\\js-basics\\02_coercion\\02_types\\02-a_explicit-coercion_docs.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "toString is actually a method. Then we would expect it not to operate on a primitive. But actually it works (yay!). When the toString method is called on a primitive, it converts the primitive into its object wrapper (implicit) and then calls the method (explicit). It is called boxing",
                      "fullTitle": "Explicit Coercion number -> string toString toString is actually a method. Then we would expect it not to operate on a primitive. But actually it works (yay!). When the toString method is called on a primitive, it converts the primitive into its object wrapper (implicit) and then calls the method (explicit). It is called boxing",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "6bdb7f5f-ac2b-4f48-9d40-0b1c19545cde",
                      "parentUUID": "5ffb035e-c8c8-479c-87c7-983d7a698b2d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "We think of it as explicitly implicit.",
                      "fullTitle": "Explicit Coercion number -> string toString We think of it as explicitly implicit.",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "1d9d2a2d-731a-4e3c-b860-c705d5a973a4",
                      "parentUUID": "5ffb035e-c8c8-479c-87c7-983d7a698b2d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "converts the given value to a string primitive",
                      "fullTitle": "Explicit Coercion number -> string toString converts the given value to a string primitive",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var a = 123;\nvar output = a.toString();\nassert.equal(typeof output, 'string');\nassert.equal(output, '123');",
                      "err": {},
                      "uuid": "28a59a77-b572-4ab9-a2dc-d086d92d459f",
                      "parentUUID": "5ffb035e-c8c8-479c-87c7-983d7a698b2d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6bdb7f5f-ac2b-4f48-9d40-0b1c19545cde",
                    "1d9d2a2d-731a-4e3c-b860-c705d5a973a4",
                    "28a59a77-b572-4ab9-a2dc-d086d92d459f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "c7f08ada-3887-424b-9615-0b824e7b12a8",
                  "title": "String() Native Function",
                  "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\02_types\\02-a_explicit-coercion_docs.js",
                  "file": "\\src\\collection\\js-basics\\02_coercion\\02_types\\02-a_explicit-coercion_docs.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "It can be used to convert a given value into a number primitive, and it runs the ToNumber abstract operation.",
                      "fullTitle": "Explicit Coercion number -> string String() Native Function It can be used to convert a given value into a number primitive, and it runs the ToNumber abstract operation.",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "4829a58d-203e-4219-a52d-4bd20f9ebf32",
                      "parentUUID": "c7f08ada-3887-424b-9615-0b824e7b12a8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "converts the given value to a string primitive",
                      "fullTitle": "Explicit Coercion number -> string String() Native Function converts the given value to a string primitive",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var a = 123;\nvar output = String(a);\nassert.equal(typeof output, 'string');\nassert.equal(output, '123');",
                      "err": {},
                      "uuid": "0c17277e-19b9-473e-9327-b039eda35be6",
                      "parentUUID": "c7f08ada-3887-424b-9615-0b824e7b12a8",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4829a58d-203e-4219-a52d-4bd20f9ebf32",
                    "0c17277e-19b9-473e-9327-b039eda35be6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "ff82e6dd-76e4-4f8d-a2d8-d67d5fbc8efa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "64d978b2-35f1-49cc-b0f2-187d73f15897",
              "title": "* -> boolean",
              "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\02_types\\02-a_explicit-coercion_docs.js",
              "file": "\\src\\collection\\js-basics\\02_coercion\\02_types\\02-a_explicit-coercion_docs.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "We have a lot of use cases for converting any primitive type into boolean. There are a couple of ways to do it.",
                  "fullTitle": "Explicit Coercion * -> boolean We have a lot of use cases for converting any primitive type into boolean. There are a couple of ways to do it.",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "6ec7105d-1460-4459-b253-7e8bff293bc5",
                  "parentUUID": "64d978b2-35f1-49cc-b0f2-187d73f15897",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "c41aa030-0181-470b-bd18-732d7ce9c381",
                  "title": "Boolean() Native Function",
                  "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\02_types\\02-a_explicit-coercion_docs.js",
                  "file": "\\src\\collection\\js-basics\\02_coercion\\02_types\\02-a_explicit-coercion_docs.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "It can be used to convert a given value into a boolean primitive, and it runs the ToBoolean abstract operation.",
                      "fullTitle": "Explicit Coercion * -> boolean Boolean() Native Function It can be used to convert a given value into a boolean primitive, and it runs the ToBoolean abstract operation.",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "9191b965-ad1e-48c2-9ebd-8e1b8cd0623b",
                      "parentUUID": "c41aa030-0181-470b-bd18-732d7ce9c381",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "converts the given value to a boolean primitive",
                      "fullTitle": "Explicit Coercion * -> boolean Boolean() Native Function converts the given value to a boolean primitive",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var a = '';\nvar output = Boolean(a);\nassert.equal(typeof output, 'boolean');\nassert.equal(output, false);",
                      "err": {},
                      "uuid": "43eb5d2c-2f46-4e9d-a4dc-22b190e19b9b",
                      "parentUUID": "c41aa030-0181-470b-bd18-732d7ce9c381",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9191b965-ad1e-48c2-9ebd-8e1b8cd0623b",
                    "43eb5d2c-2f46-4e9d-a4dc-22b190e19b9b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "b6e2a8de-afd1-4da4-981b-cf0d03ea81f8",
                  "title": "(!!) Double Negate Operator",
                  "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\02_types\\02-a_explicit-coercion_docs.js",
                  "file": "\\src\\collection\\js-basics\\02_coercion\\02_types\\02-a_explicit-coercion_docs.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "By seeing the double negate, it is easy to believe that there is a actually a double negate operator. But there is no such thing.",
                      "fullTitle": "Explicit Coercion * -> boolean (!!) Double Negate Operator By seeing the double negate, it is easy to believe that there is a actually a double negate operator. But there is no such thing.",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "c6b78ba3-3d13-40e6-9f9c-e6b2e6e11a9a",
                      "parentUUID": "b6e2a8de-afd1-4da4-981b-cf0d03ea81f8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "The following happens when double negate operator is operated,\n\t\t\t\t\t1. The first negate operator tries to converts the given value to a boolean and then negates its value (implicit).\n\t\t\t\t\t2. The second negate flips its value to give us the correct boolean value (explicit).\n\t\t\t\t",
                      "fullTitle": "Explicit Coercion * -> boolean (!!) Double Negate Operator The following happens when double negate operator is operated,\n\t\t\t\t\t1. The first negate operator tries to converts the given value to a boolean and then negates its value (implicit).\n\t\t\t\t\t2. The second negate flips its value to give us the correct boolean value (explicit).\n\t\t\t\t",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "84b3d39f-82bc-4933-9b16-bc311d4d6b34",
                      "parentUUID": "b6e2a8de-afd1-4da4-981b-cf0d03ea81f8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "We think of it as explicitly implicit.",
                      "fullTitle": "Explicit Coercion * -> boolean (!!) Double Negate Operator We think of it as explicitly implicit.",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "91489583-802e-4cc1-a5c1-e16f78fa812a",
                      "parentUUID": "b6e2a8de-afd1-4da4-981b-cf0d03ea81f8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "converts the given value to a boolean primitive. When tried to coerce to a boolean, [] results in true, because it is not in the falsy list. Refer to ToBoolean abstract operation.",
                      "fullTitle": "Explicit Coercion * -> boolean (!!) Double Negate Operator converts the given value to a boolean primitive. When tried to coerce to a boolean, [] results in true, because it is not in the falsy list. Refer to ToBoolean abstract operation.",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var a = [];\nvar output = !!a;\nassert.equal(typeof output, 'boolean');\nassert.equal(output, true);",
                      "err": {},
                      "uuid": "e9fe971e-9d7f-45dd-ac2a-1822bca5b1c0",
                      "parentUUID": "b6e2a8de-afd1-4da4-981b-cf0d03ea81f8",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c6b78ba3-3d13-40e6-9f9c-e6b2e6e11a9a",
                    "84b3d39f-82bc-4933-9b16-bc311d4d6b34",
                    "91489583-802e-4cc1-a5c1-e16f78fa812a",
                    "e9fe971e-9d7f-45dd-ac2a-1822bca5b1c0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "a3a5eff8-1222-40fc-be88-92c993e72abe",
                  "title": "(?:) Ternary Operator",
                  "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\02_types\\02-a_explicit-coercion_docs.js",
                  "file": "\\src\\collection\\js-basics\\02_coercion\\02_types\\02-a_explicit-coercion_docs.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "When ternary operator is operated on a value, it first tries to coerce it to a boolean primitive & then it checks to value to determine true or false.",
                      "fullTitle": "Explicit Coercion * -> boolean (?:) Ternary Operator When ternary operator is operated on a value, it first tries to coerce it to a boolean primitive & then it checks to value to determine true or false.",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "eec1960b-4d0f-4182-8e2c-7bfa86b54145",
                      "parentUUID": "a3a5eff8-1222-40fc-be88-92c993e72abe",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "We think of it as explicitly implicit.",
                      "fullTitle": "Explicit Coercion * -> boolean (?:) Ternary Operator We think of it as explicitly implicit.",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "",
                      "err": {},
                      "uuid": "ac5a2063-6605-4ec4-b396-dd77a07b5fab",
                      "parentUUID": "a3a5eff8-1222-40fc-be88-92c993e72abe",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "converts the given value to a boolean primitive",
                      "fullTitle": "Explicit Coercion * -> boolean (?:) Ternary Operator converts the given value to a boolean primitive",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var a = '';\nvar output = a ? true : false;\nassert.equal(typeof output, 'boolean');\nassert.equal(output, false);",
                      "err": {},
                      "uuid": "7ead41fc-9d84-4685-8f47-2cf20781b9cc",
                      "parentUUID": "a3a5eff8-1222-40fc-be88-92c993e72abe",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "eec1960b-4d0f-4182-8e2c-7bfa86b54145",
                    "ac5a2063-6605-4ec4-b396-dd77a07b5fab",
                    "7ead41fc-9d84-4685-8f47-2cf20781b9cc"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "6ec7105d-1460-4459-b253-7e8bff293bc5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "454bec62-797d-460a-9f31-494862594f0a",
            "251eab4c-10cb-4b0e-95af-cd3dfcb75834"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "eea25724-3272-4255-a153-68a6e7b0f2e2",
          "title": "Explicit Coercion Examples",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\02_types\\02-b_explicit-examples_docs.js",
          "file": "\\src\\collection\\js-basics\\02_coercion\\02_types\\02-b_explicit-examples_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "30748a9a-3b19-4eb8-8c5f-0c334937e1d5",
              "title": "Date",
              "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\02_types\\02-b_explicit-examples_docs.js",
              "file": "\\src\\collection\\js-basics\\02_coercion\\02_types\\02-b_explicit-examples_docs.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "There is no literal syntax for creating date objects. We have to use the new Date() to create a date object. For most use cases, we need to get the current time in unix time stamp.",
                  "fullTitle": "Explicit Coercion Examples Date There is no literal syntax for creating date objects. We have to use the new Date() to create a date object. For most use cases, we need to get the current time in unix time stamp.",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "4896b370-43f3-4c09-9dad-b7649acfa629",
                  "parentUUID": "30748a9a-3b19-4eb8-8c5f-0c334937e1d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It turns out that the date object when coerced to a number returns the current time in unix timestamp. Also there is a utility Date.now() which also returns the current time. The usage of Number native function clearly communicates our intent, rather than using unary (+) operator. Hence native functions should be preferred in this case.",
                  "fullTitle": "Explicit Coercion Examples Date It turns out that the date object when coerced to a number returns the current time in unix timestamp. Also there is a utility Date.now() which also returns the current time. The usage of Number native function clearly communicates our intent, rather than using unary (+) operator. Hence native functions should be preferred in this case.",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var dateByCoercion1 = Number(new Date());\nvar dateByCoercion2 = +new Date();\nvar dateByUtility = Date.now();\nassert.equal(dateByCoercion1, dateByUtility);\nassert.equal(dateByCoercion2, dateByUtility);",
                  "err": {},
                  "uuid": "4973ccf9-5737-42db-81fc-d14f36336639",
                  "parentUUID": "30748a9a-3b19-4eb8-8c5f-0c334937e1d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It is notable that parseInt cannot be used to parse the number from the date object, because new Date() returns string value, which when parsed returns NaN",
                  "fullTitle": "Explicit Coercion Examples Date It is notable that parseInt cannot be used to parse the number from the date object, because new Date() returns string value, which when parsed returns NaN",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var dateByCoercion1 = parseInt(new Date(), 10);\nassert.equal(Number.isNaN(dateByCoercion1), true);",
                  "err": {},
                  "uuid": "e0c6e75e-02e4-4418-9860-380e46119497",
                  "parentUUID": "30748a9a-3b19-4eb8-8c5f-0c334937e1d5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4896b370-43f3-4c09-9dad-b7649acfa629",
                "4973ccf9-5737-42db-81fc-d14f36336639",
                "e0c6e75e-02e4-4418-9860-380e46119497"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e5470cb4-e0cc-45ad-b62a-64bdab61f49f",
              "title": "indexOf (-1) -> ~ Operator",
              "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\02_types\\02-b_explicit-examples_docs.js",
              "file": "\\src\\collection\\js-basics\\02_coercion\\02_types\\02-b_explicit-examples_docs.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "We use indexOf method to see whether there is a substring in a given string, if found, it returns the index of the character or it returns (-1)",
                  "fullTitle": "Explicit Coercion Examples indexOf (-1) -> ~ Operator We use indexOf method to see whether there is a substring in a given string, if found, it returns the index of the character or it returns (-1)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "a2c8b956-3be6-430a-8dfb-933040b3b8fc",
                  "parentUUID": "e5470cb4-e0cc-45ad-b62a-64bdab61f49f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "The problem with (-1) is that it is a truthy value, because it is not in falsy list. So if we need to check for true/false, we would need to use === -1. Maybe a sensible result of such functions like indexOf is either false or NaN. But we do not get that.",
                  "fullTitle": "Explicit Coercion Examples indexOf (-1) -> ~ Operator The problem with (-1) is that it is a truthy value, because it is not in falsy list. So if we need to check for true/false, we would need to use === -1. Maybe a sensible result of such functions like indexOf is either false or NaN. But we do not get that.",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "5e8b2c8b-2df3-4e36-9543-7cf9c7e79e9a",
                  "parentUUID": "e5470cb4-e0cc-45ad-b62a-64bdab61f49f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "An alternate approach is to use (~) operator. The (~) operator when operated, adds one to it and negates the value ~x -> -(x+1). It is called one's complement.",
                  "fullTitle": "Explicit Coercion Examples indexOf (-1) -> ~ Operator An alternate approach is to use (~) operator. The (~) operator when operated, adds one to it and negates the value ~x -> -(x+1). It is called one's complement.",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var a = 5;\nvar output = ~a;\nassert.equal(output, -6);",
                  "err": {},
                  "uuid": "da982256-3930-45a8-b424-87c4797f4dba",
                  "parentUUID": "e5470cb4-e0cc-45ad-b62a-64bdab61f49f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Using the above property, if the return value of a function is (-1) then ~(-1) would result in (-0) as shown ~(-1) -> -(-1+1) -> -0. Since (-0) is falsy, we could use it as a boolean primitive (yay!).",
                  "fullTitle": "Explicit Coercion Examples indexOf (-1) -> ~ Operator Using the above property, if the return value of a function is (-1) then ~(-1) would result in (-0) as shown ~(-1) -> -(-1+1) -> -0. Since (-0) is falsy, we could use it as a boolean primitive (yay!).",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "function isStringFound(substr, str) {\n\treturn ~(str.indexOf(substr)) ? true : false;\n}\nassert.equal(isStringFound('a','abc'), true);\nassert.equal(isStringFound('A','abc'), false);",
                  "err": {},
                  "uuid": "d5cfbba8-2fe8-49f6-913b-13a3bfe46f5d",
                  "parentUUID": "e5470cb4-e0cc-45ad-b62a-64bdab61f49f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Even though, the syntax is very concise, if some developer were to read this, it is harder to understand what the (~) operator does & why it is used in such a way.",
                  "fullTitle": "Explicit Coercion Examples indexOf (-1) -> ~ Operator Even though, the syntax is very concise, if some developer were to read this, it is harder to understand what the (~) operator does & why it is used in such a way.",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "5811dfeb-a000-40ed-be79-a515b5a9977c",
                  "parentUUID": "e5470cb4-e0cc-45ad-b62a-64bdab61f49f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "As of ES6, there is a utility includes() which behaves exactly as we would expect. It returns a boolean when checked for a substring in a string.",
                  "fullTitle": "Explicit Coercion Examples indexOf (-1) -> ~ Operator As of ES6, there is a utility includes() which behaves exactly as we would expect. It returns a boolean when checked for a substring in a string.",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var a = 'ABC';\nvar output = a.includes('A');\nassert.equal(output, true);",
                  "err": {},
                  "uuid": "7f1ef985-f4e5-4cb0-9dfc-3fcb7652ef9c",
                  "parentUUID": "e5470cb4-e0cc-45ad-b62a-64bdab61f49f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a2c8b956-3be6-430a-8dfb-933040b3b8fc",
                "5e8b2c8b-2df3-4e36-9543-7cf9c7e79e9a",
                "da982256-3930-45a8-b424-87c4797f4dba",
                "d5cfbba8-2fe8-49f6-913b-13a3bfe46f5d",
                "5811dfeb-a000-40ed-be79-a515b5a9977c",
                "7f1ef985-f4e5-4cb0-9dfc-3fcb7652ef9c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4728b916-c33b-476f-ba86-0b97bad21be9",
          "title": "Implicit Coercion",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\02_types\\03_implicit-coercion_docs.js",
          "file": "\\src\\collection\\js-basics\\02_coercion\\02_types\\03_implicit-coercion_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Implicit Coercion implies that result happens as a side effect of other operation. It is as if we say we want the end result to happen. But don't care how it happens. Let the computer decide how it should be performed. That doesn't mean that it is all bad. We should make an informed decision about how clearly we are communicating our intent.",
              "fullTitle": "Implicit Coercion Implicit Coercion implies that result happens as a side effect of other operation. It is as if we say we want the end result to happen. But don't care how it happens. Let the computer decide how it should be performed. That doesn't mean that it is all bad. We should make an informed decision about how clearly we are communicating our intent.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "1012acb2-35fb-406f-954a-7e43773518d7",
              "parentUUID": "4728b916-c33b-476f-ba86-0b97bad21be9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "97850c46-ad8c-4dfc-8b89-a0f52904cc8a",
              "title": "string -> number",
              "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\02_types\\03_implicit-coercion_docs.js",
              "file": "\\src\\collection\\js-basics\\02_coercion\\02_types\\03_implicit-coercion_docs.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "We want to convert a string to a number primitive in an implicit way. Like doing a mathematical operation which doesn't have any effect on the original value. The following are some examples",
                  "fullTitle": "Implicit Coercion string -> number We want to convert a string to a number primitive in an implicit way. Like doing a mathematical operation which doesn't have any effect on the original value. The following are some examples",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "fbfea9f3-76bc-4b63-82b4-fc0969fa7bd5",
                  "parentUUID": "97850c46-ad8c-4dfc-8b89-a0f52904cc8a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Subtracting with (0). The minus operator (-) is designed specifically to deal with numbers. When operated on values other than numbers, it tries to coerce the value to a number and then subtracts zero (like a no-operation) from it",
                  "fullTitle": "Implicit Coercion string -> number Subtracting with (0). The minus operator (-) is designed specifically to deal with numbers. When operated on values other than numbers, it tries to coerce the value to a number and then subtracts zero (like a no-operation) from it",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var a = '123';\nvar output = a - 0;\nassert.equal(typeof output, 'number');\nassert.equal(output, 123);",
                  "err": {},
                  "uuid": "d5008422-10ca-4490-8cf1-03cfe102f2d7",
                  "parentUUID": "97850c46-ad8c-4dfc-8b89-a0f52904cc8a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "In a similar way, subtracting with '0' would also give back the same result. In this case it would also try to coerce '0' to a number. As a matter of fact, subtracting with empty string '' will also work",
                  "fullTitle": "Implicit Coercion string -> number In a similar way, subtracting with '0' would also give back the same result. In this case it would also try to coerce '0' to a number. As a matter of fact, subtracting with empty string '' will also work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var a = '123';\nvar output1 = a - '0';\nvar output2 = a - '';\nassert.equal(typeof output1, 'number');\nassert.equal(output1, 123);\nassert.equal(typeof output2, 'number');\nassert.equal(output2, 123);",
                  "err": {},
                  "uuid": "a8c09a99-0be7-46f2-8824-bc2e1601cf85",
                  "parentUUID": "97850c46-ad8c-4dfc-8b89-a0f52904cc8a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "In a similar way, dividing by one also would give the same result",
                  "fullTitle": "Implicit Coercion string -> number In a similar way, dividing by one also would give the same result",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var a = '123';\nvar output = a / 1;\nassert.equal(typeof output, 'number');\nassert.equal(output, 123);",
                  "err": {},
                  "uuid": "42549498-a6ac-4c0a-9335-9831a110c10a",
                  "parentUUID": "97850c46-ad8c-4dfc-8b89-a0f52904cc8a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "We should never do the coercion this way, as it doesn't convey our intentions correctly. But we should be aware of this.",
                  "fullTitle": "Implicit Coercion string -> number We should never do the coercion this way, as it doesn't convey our intentions correctly. But we should be aware of this.",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "1e3f8cab-fe07-4c80-9a2d-06f53f44ab2c",
                  "parentUUID": "97850c46-ad8c-4dfc-8b89-a0f52904cc8a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fbfea9f3-76bc-4b63-82b4-fc0969fa7bd5",
                "d5008422-10ca-4490-8cf1-03cfe102f2d7",
                "a8c09a99-0be7-46f2-8824-bc2e1601cf85",
                "42549498-a6ac-4c0a-9335-9831a110c10a",
                "1e3f8cab-fe07-4c80-9a2d-06f53f44ab2c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "71a01b78-06b7-4da9-80e4-7f49bb935eaa",
              "title": "number -> string",
              "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\02_types\\03_implicit-coercion_docs.js",
              "file": "\\src\\collection\\js-basics\\02_coercion\\02_types\\03_implicit-coercion_docs.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Following are some of the ways, in which we convert number to string in an implicit way",
                  "fullTitle": "Implicit Coercion number -> string Following are some of the ways, in which we convert number to string in an implicit way",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "b259cd05-3793-4587-ac14-9d8e2da0636a",
                  "parentUUID": "71a01b78-06b7-4da9-80e4-7f49bb935eaa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Adding number with string. The (+) operator is designed to do mathematical addition. But if one of the operands is a string, then it prefers string concatenation. So it tries to convert the other operand into a string and adds the empty string (like no-operation) to it.",
                  "fullTitle": "Implicit Coercion number -> string Adding number with string. The (+) operator is designed to do mathematical addition. But if one of the operands is a string, then it prefers string concatenation. So it tries to convert the other operand into a string and adds the empty string (like no-operation) to it.",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var a = 123;\nvar output = a + '';\nassert.equal(typeof output, 'string');\nassert.equal(output, '123');",
                  "err": {},
                  "uuid": "a46a1276-05ae-4bca-ad31-5d65d556e898",
                  "parentUUID": "71a01b78-06b7-4da9-80e4-7f49bb935eaa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Doing the same with (-) operator will not work, because there is no preference for string concatenation in (-) operator as it is in (+) operator. So it converts the operands to a number '' -> 0 and hence the coercion will not happen",
                  "fullTitle": "Implicit Coercion number -> string Doing the same with (-) operator will not work, because there is no preference for string concatenation in (-) operator as it is in (+) operator. So it converts the operands to a number '' -> 0 and hence the coercion will not happen",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var a = 123;\nvar output = a - '';\nassert.equal(typeof output, 'number');\nassert.equal(output, 123);",
                  "err": {},
                  "uuid": "4ed91e92-dcae-4f2d-a707-97c9a112428e",
                  "parentUUID": "71a01b78-06b7-4da9-80e4-7f49bb935eaa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b259cd05-3793-4587-ac14-9d8e2da0636a",
                "a46a1276-05ae-4bca-ad31-5d65d556e898",
                "4ed91e92-dcae-4f2d-a707-97c9a112428e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e3954222-a2d2-44bd-a282-728016a156ca",
              "title": "* -> boolean",
              "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\02_types\\03_implicit-coercion_docs.js",
              "file": "\\src\\collection\\js-basics\\02_coercion\\02_types\\03_implicit-coercion_docs.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Whenever we write an if statement, the value is implicitly coerced to a boolean value. The following are some examples",
                  "fullTitle": "Implicit Coercion * -> boolean Whenever we write an if statement, the value is implicitly coerced to a boolean value. The following are some examples",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "80489c72-1682-4017-84cb-f0f42dff6b14",
                  "parentUUID": "e3954222-a2d2-44bd-a282-728016a156ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Implicit coercion happens in an if statement. If any value that is not on the falsy list is passed to if statement, it passes",
                  "fullTitle": "Implicit Coercion * -> boolean Implicit coercion happens in an if statement. If any value that is not on the falsy list is passed to if statement, it passes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var a = '123';\nvar output;\nif (a) { \n\toutput = true; \n}\nelse {\n\toutput = false;\n}\nassert.equal(typeof output, 'boolean');\nassert.equal(output, true);",
                  "err": {},
                  "uuid": "bbb0bf84-35fe-4036-bf1f-27d15031286a",
                  "parentUUID": "e3954222-a2d2-44bd-a282-728016a156ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Similarly, if we pass anything in the falsy list, then it evaluates to false",
                  "fullTitle": "Implicit Coercion * -> boolean Similarly, if we pass anything in the falsy list, then it evaluates to false",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var a = '';\n\t\t\t\tvar output;\n\t\t\t\tif (a) { \n\t\t\t\t\toutput = true; \n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\toutput = false;\n\t\t\t\t}\n\t\t\t\tassert.equal(typeof output, 'boolean');\n\t\t\t\tassert.equal(output, false);",
                  "err": {},
                  "uuid": "c305c472-8539-47b6-abf5-18978791046a",
                  "parentUUID": "e3954222-a2d2-44bd-a282-728016a156ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "But, things start to act weird if we use (==) operator. If (==) operator is used to compare to a boolean value, it tries to convert both the operands to number. (==) PREFERS to checks numbers (IMPORTANT!). Hence when the statement ('123' == true) is executed, (==) operator coerces the operands to number primitives. So ('123' == true) -> (123 == 1), which results in false (weird!)",
                  "fullTitle": "Implicit Coercion * -> boolean But, things start to act weird if we use (==) operator. If (==) operator is used to compare to a boolean value, it tries to convert both the operands to number. (==) PREFERS to checks numbers (IMPORTANT!). Hence when the statement ('123' == true) is executed, (==) operator coerces the operands to number primitives. So ('123' == true) -> (123 == 1), which results in false (weird!)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var a = '123';\nvar output;\nif (a == true) { \n\toutput = true; \n}\nelse {\n\toutput = false;\n}\nassert.equal(typeof output, 'boolean');\nassert.equal(output, false);",
                  "err": {},
                  "uuid": "75e599d1-2ccc-4bac-ba43-de25996ba8f4",
                  "parentUUID": "e3954222-a2d2-44bd-a282-728016a156ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Sometimes, it leads to a happy accident. In this case also, (==) prefers numbers and hence coerces '' to 0 and false to 0 ('' == false) -> (0 == 0), which results in true, but only as a happy accident (IMPORTANT!)",
                  "fullTitle": "Implicit Coercion * -> boolean Sometimes, it leads to a happy accident. In this case also, (==) prefers numbers and hence coerces '' to 0 and false to 0 ('' == false) -> (0 == 0), which results in true, but only as a happy accident (IMPORTANT!)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var a = '';\nvar output;\nif (a == false) { \n\toutput = true; \n}\nelse {\n\toutput = false;\n}\nassert.equal(typeof output, 'boolean');\nassert.equal(output, true);",
                  "err": {},
                  "uuid": "a65b91f2-5add-438e-8096-5b2f222ec2e9",
                  "parentUUID": "e3954222-a2d2-44bd-a282-728016a156ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Similarly, Implicit coercion happens on objects as well. If an empty array [] is passed to an if statement, it tries to coerce it to a boolean meaning it calls ToBoolean abstract operation, which results in true, because [] is not in the falsy list",
                  "fullTitle": "Implicit Coercion * -> boolean Similarly, Implicit coercion happens on objects as well. If an empty array [] is passed to an if statement, it tries to coerce it to a boolean meaning it calls ToBoolean abstract operation, which results in true, because [] is not in the falsy list",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var a = [];\nvar output;\nif (a) { \n\toutput = true; \n}\nelse {\n\toutput = false;\n}\nassert.equal(typeof output, 'boolean');\nassert.equal(output, true);",
                  "err": {},
                  "uuid": "e4ef6333-f2cb-4296-90ed-bc9faf9e1753",
                  "parentUUID": "e3954222-a2d2-44bd-a282-728016a156ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "But, if we start using (==) operator on checking the objects, we get strange results. In this case we check ([] == true). As mentioned earlier, (==) prefers to check numbers, hence it coerces it's operands to its number primitive. So [] becomes 0 & true becomes 1 ([] == true) -> (0 == 1) which results in false",
                  "fullTitle": "Implicit Coercion * -> boolean But, if we start using (==) operator on checking the objects, we get strange results. In this case we check ([] == true). As mentioned earlier, (==) prefers to check numbers, hence it coerces it's operands to its number primitive. So [] becomes 0 & true becomes 1 ([] == true) -> (0 == 1) which results in false",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var a = [];\nvar output;\nif (a == true) { \n\toutput = true; \n}\nelse {\n\toutput = false;\n}\nassert.equal(typeof output, 'boolean');\nassert.equal(output, false);",
                  "err": {},
                  "uuid": "04b680c1-2079-4386-b216-d8693035be5a",
                  "parentUUID": "e3954222-a2d2-44bd-a282-728016a156ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Implicit coercion also happens in (&&) operator. They act as a selection operators. It tries to evaluate the first operand if it is true, then it selects the other operand value or else selects the first operand value. In this case, it evaluates the empty string '', converting it to boolean results in false and hence first operand's value '' is selected and stored in output1 variable. For the next case, it evaluates the string '123', converting it to boolean results in true and hence the second operand's value is selected and stored in output2 variable.",
                  "fullTitle": "Implicit Coercion * -> boolean Implicit coercion also happens in (&&) operator. They act as a selection operators. It tries to evaluate the first operand if it is true, then it selects the other operand value or else selects the first operand value. In this case, it evaluates the empty string '', converting it to boolean results in false and hence first operand's value '' is selected and stored in output1 variable. For the next case, it evaluates the string '123', converting it to boolean results in true and hence the second operand's value is selected and stored in output2 variable.",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var a = '';\n\t\t\t\tvar output1 = a && 'a';\n\t\t\t\tvar b = '123';\n\t\t\t\tvar output2 = b && 'b';\n\t\t\t\tassert.equal(typeof output1, 'string');\n\t\t\t\tassert.equal(output1, '');\n\t\t\t\tassert.equal(typeof output1, 'string');\n\t\t\t\tassert.equal(output2, 'b');",
                  "err": {},
                  "uuid": "e9a9a1b1-8879-4b47-8e18-d91a970e5a17",
                  "parentUUID": "e3954222-a2d2-44bd-a282-728016a156ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Implicit coercion also happens in (||) operator. They act as a selection operators. It tries to evaluate the first operand if it is true, then it selects that value or else selects the other value. In this case, it evaluates the empty string '', converting it to boolean results in false and hence other operand's value 'a' is selected and stored in output variable",
                  "fullTitle": "Implicit Coercion * -> boolean Implicit coercion also happens in (||) operator. They act as a selection operators. It tries to evaluate the first operand if it is true, then it selects that value or else selects the other value. In this case, it evaluates the empty string '', converting it to boolean results in false and hence other operand's value 'a' is selected and stored in output variable",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var a = '';\n\t\t\t\tvar output = a || 'a';\n\t\t\t\tassert.equal(typeof output, 'string');\n\t\t\t\tassert.equal(output, 'a');",
                  "err": {},
                  "uuid": "e5e2df66-c12a-4690-b18c-6a0e25e7c71e",
                  "parentUUID": "e3954222-a2d2-44bd-a282-728016a156ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Since (==) operator prefers to do number comparison and not boolean coercion as we would expect, we usually get strange results. Hence it is better to avoid (==) in the following cases\n\t\t\t\t* boolean comparisons (== true or == false)\n\t\t\t\t* comparisons to either [], '' or 0\n\t\t\t",
                  "fullTitle": "Implicit Coercion * -> boolean Since (==) operator prefers to do number comparison and not boolean coercion as we would expect, we usually get strange results. Hence it is better to avoid (==) in the following cases\n\t\t\t\t* boolean comparisons (== true or == false)\n\t\t\t\t* comparisons to either [], '' or 0\n\t\t\t",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "c0583d92-dca1-4509-b0d0-076d46cec1b2",
                  "parentUUID": "e3954222-a2d2-44bd-a282-728016a156ca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "80489c72-1682-4017-84cb-f0f42dff6b14",
                "bbb0bf84-35fe-4036-bf1f-27d15031286a",
                "c305c472-8539-47b6-abf5-18978791046a",
                "75e599d1-2ccc-4bac-ba43-de25996ba8f4",
                "a65b91f2-5add-438e-8096-5b2f222ec2e9",
                "e4ef6333-f2cb-4296-90ed-bc9faf9e1753",
                "04b680c1-2079-4386-b216-d8693035be5a",
                "e9a9a1b1-8879-4b47-8e18-d91a970e5a17",
                "e5e2df66-c12a-4690-b18c-6a0e25e7c71e",
                "c0583d92-dca1-4509-b0d0-076d46cec1b2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "1012acb2-35fb-406f-954a-7e43773518d7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bbbfa2e6-4bbf-4f9b-82c2-45236ea8de03",
          "title": "Coercion Grid",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\03_coercion-grid\\index_docs.js",
          "file": "\\src\\collection\\js-basics\\02_coercion\\03_coercion-grid\\index_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Coercion Grid is table which has all the cases indicating what the value coerces into. It serves as a guideline to what to expect if a coercion happens on that kind of value.",
              "fullTitle": "Coercion Grid Coercion Grid is table which has all the cases indicating what the value coerces into. It serves as a guideline to what to expect if a coercion happens on that kind of value.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "43875d01-f090-4338-9f66-4457528804fa",
              "parentUUID": "bbbfa2e6-4bbf-4f9b-82c2-45236ea8de03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "There are two files - coercion-grid-WTF.png & coercion-grid-fixed.png",
              "fullTitle": "Coercion Grid There are two files - coercion-grid-WTF.png & coercion-grid-fixed.png",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "afb32ecc-430d-4146-b16d-148a710a6f6f",
              "parentUUID": "bbbfa2e6-4bbf-4f9b-82c2-45236ea8de03",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "d58bb494-484b-4fb0-a65a-e08ab884fb7f",
              "title": "coercion-grid-WTF",
              "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\03_coercion-grid\\index_docs.js",
              "file": "\\src\\collection\\js-basics\\02_coercion\\03_coercion-grid\\index_docs.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It shows what are all the bad coercions in javascript. It is important to understand these to get predictable results. Even though we know it is non-sense, that's how the language is designed. Knowing the corner cases would help in getting predictable results.",
                  "fullTitle": "Coercion Grid coercion-grid-WTF It shows what are all the bad coercions in javascript. It is important to understand these to get predictable results. Even though we know it is non-sense, that's how the language is designed. Knowing the corner cases would help in getting predictable results.",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "1d6b7428-419e-44f9-849e-87b553f5257f",
                  "parentUUID": "d58bb494-484b-4fb0-a65a-e08ab884fb7f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1d6b7428-419e-44f9-849e-87b553f5257f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "881b5261-4a85-45c1-a7b1-36eb87c20caf",
              "title": "coercion-grid-fixed",
              "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\03_coercion-grid\\index_docs.js",
              "file": "\\src\\collection\\js-basics\\02_coercion\\03_coercion-grid\\index_docs.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It shows what if we fixed all the coercion bugs. What if we correctly coerce it to the value we think. Those values are included in this list.",
                  "fullTitle": "Coercion Grid coercion-grid-fixed It shows what if we fixed all the coercion bugs. What if we correctly coerce it to the value we think. Those values are included in this list.",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "3f0ca2d4-f27c-43a9-8113-af41219870f4",
                  "parentUUID": "881b5261-4a85-45c1-a7b1-36eb87c20caf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3f0ca2d4-f27c-43a9-8113-af41219870f4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "43875d01-f090-4338-9f66-4457528804fa",
            "afb32ecc-430d-4146-b16d-148a710a6f6f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1a809a7f-27ed-4160-a6df-fa689099e89e",
          "title": "[] == ![] results true",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\02_coercion\\04_equality-example\\index_docs.js",
          "file": "\\src\\collection\\js-basics\\02_coercion\\04_equality-example\\index_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "As mentioned earlier, (==) operator prefers to compare number rather than comparing boolean. In this example, when the following statement is executed [] == ![], it results in true (weird!)",
              "fullTitle": "[] == ![] results true As mentioned earlier, (==) operator prefers to compare number rather than comparing boolean. In this example, when the following statement is executed [] == ![], it results in true (weird!)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var output = ( [] == ![] );\nassert.equal(typeof output, 'boolean');\nassert.equal(output, true);",
              "err": {},
              "uuid": "df68b829-5bd1-41a5-8965-cf0068363eb0",
              "parentUUID": "1a809a7f-27ed-4160-a6df-fa689099e89e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "We are going to go step by step into how javascript evaluates this statement to true, based on all the rules we learnt.",
              "fullTitle": "[] == ![] results true We are going to go step by step into how javascript evaluates this statement to true, based on all the rules we learnt.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "033b13d1-5e9d-483f-8c11-e30e085e800b",
              "parentUUID": "1a809a7f-27ed-4160-a6df-fa689099e89e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Initially, when the statement is executed, there is an operator precedence. So the negate operator (!) gets precedence and it operates on []. Since (!) operator only operates on boolean primitive and since [] is an object, it calls ToBoolean abstract operation, which results in true, because [] is not in the falsy list. So now it becomes ( [] == !true ). It now is operated by (!) operated which results in false ( [] == false ).",
              "fullTitle": "[] == ![] results true Initially, when the statement is executed, there is an operator precedence. So the negate operator (!) gets precedence and it operates on []. Since (!) operator only operates on boolean primitive and since [] is an object, it calls ToBoolean abstract operation, which results in true, because [] is not in the falsy list. So now it becomes ( [] == !true ). It now is operated by (!) operated which results in false ( [] == false ).",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "e5672a30-8061-469a-9878-acee41669bd5",
              "parentUUID": "1a809a7f-27ed-4160-a6df-fa689099e89e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Next, Since (==) operator prefers to do number comparison, the array [] on the LHS is to be converted to number primitive by ToNumber abstract operation. Since [] is an object, it runs ToPrimitive first, which results in '' ( '' == false). Now it runs ToNumber on it to get 0 ( 0 == false)",
              "fullTitle": "[] == ![] results true Next, Since (==) operator prefers to do number comparison, the array [] on the LHS is to be converted to number primitive by ToNumber abstract operation. Since [] is an object, it runs ToPrimitive first, which results in '' ( '' == false). Now it runs ToNumber on it to get 0 ( 0 == false)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "47855f81-ef50-4327-b0bb-64d45d9e3f28",
              "parentUUID": "1a809a7f-27ed-4160-a6df-fa689099e89e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Next, it tries to convert the RHS to the number, which results in 0 ( 0 == 0 ), which in turn gives us true",
              "fullTitle": "[] == ![] results true Next, it tries to convert the RHS to the number, which results in 0 ( 0 == 0 ), which in turn gives us true",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "5af118ff-cbd6-45dc-80b4-d7e2dd341387",
              "parentUUID": "1a809a7f-27ed-4160-a6df-fa689099e89e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "To summarize, following are the steps\n\t\t\t1. [] == ![]\n\t\t\t2. [] == !true \t(Negate precedence -> ToBoolean -> true (as it is not in falsy list))\n\t\t\t3. [] == false \t(Negate operator)\n\t\t\t4. '' == false \t([] -> == operator -> ToNumber -> ToPrimitive -> '')\n\t\t\t5. 0  == false \t('' -> ToNumber -> 0)\n\t\t\t6. 0  == 0 \t\t(false -> ToNumber -> 0)\n\t\t\t7. true\n\t\t",
              "fullTitle": "[] == ![] results true To summarize, following are the steps\n\t\t\t1. [] == ![]\n\t\t\t2. [] == !true \t(Negate precedence -> ToBoolean -> true (as it is not in falsy list))\n\t\t\t3. [] == false \t(Negate operator)\n\t\t\t4. '' == false \t([] -> == operator -> ToNumber -> ToPrimitive -> '')\n\t\t\t5. 0  == false \t('' -> ToNumber -> 0)\n\t\t\t6. 0  == 0 \t\t(false -> ToNumber -> 0)\n\t\t\t7. true\n\t\t",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "d2263b1b-234b-4414-a7d3-1c5ad3f82361",
              "parentUUID": "1a809a7f-27ed-4160-a6df-fa689099e89e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It is more predictable, if we follow the steps that are written in specs, because it is what the javascript does. Even though it might seem counter-intuitive in some cases, if we know the rules, we can predict it beforehand.",
              "fullTitle": "[] == ![] results true It is more predictable, if we follow the steps that are written in specs, because it is what the javascript does. Even though it might seem counter-intuitive in some cases, if we know the rules, we can predict it beforehand.",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "462753e6-4b80-49ef-a9ff-f840ca15d964",
              "parentUUID": "1a809a7f-27ed-4160-a6df-fa689099e89e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "df68b829-5bd1-41a5-8965-cf0068363eb0",
            "033b13d1-5e9d-483f-8c11-e30e085e800b",
            "e5672a30-8061-469a-9878-acee41669bd5",
            "47855f81-ef50-4327-b0bb-64d45d9e3f28",
            "5af118ff-cbd6-45dc-80b4-d7e2dd341387",
            "d2263b1b-234b-4414-a7d3-1c5ad3f82361",
            "462753e6-4b80-49ef-a9ff-f840ca15d964"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8b5a3773-43a4-40da-ab8e-c3bd43517e28",
          "title": "TODO: Compile and Execution Phase",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\03_scope\\01_compile-and-execute\\01_compile-and-execution-phase_docs.js",
          "file": "\\src\\collection\\js-basics\\03_scope\\01_compile-and-execute\\01_compile-and-execution-phase_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TODO: Compile and Execution Phase",
              "fullTitle": "TODO: Compile and Execution Phase TODO: Compile and Execution Phase",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal('TODO', 'TODO');",
              "err": {},
              "uuid": "0e4c50eb-b09f-4460-9d48-c467b03b6823",
              "parentUUID": "8b5a3773-43a4-40da-ab8e-c3bd43517e28",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0e4c50eb-b09f-4460-9d48-c467b03b6823"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f85e019d-1d6e-4046-8a8e-202362e2afae",
          "title": "TODO: Compile and Execution Phase",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\03_scope\\01_compile-and-execute\\01_compile-and-execution-phase_docs.js",
          "file": "\\src\\collection\\js-basics\\03_scope\\01_compile-and-execute\\01_compile-and-execution-phase_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TODO: Compile and Execution Phase",
              "fullTitle": "TODO: Compile and Execution Phase TODO: Compile and Execution Phase",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal('TODO', 'TODO');",
              "err": {},
              "uuid": "652fb533-87f8-4939-9e62-f93802ec2f80",
              "parentUUID": "f85e019d-1d6e-4046-8a8e-202362e2afae",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "652fb533-87f8-4939-9e62-f93802ec2f80"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c3b36404-8ded-4d1b-8118-a939d53c6d75",
          "title": "TODO: Auto Globals - Example1",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\03_scope\\01_compile-and-execute\\02_auto-global_docs.js",
          "file": "\\src\\collection\\js-basics\\03_scope\\01_compile-and-execute\\02_auto-global_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TODO: Auto Globals - Example1",
              "fullTitle": "TODO: Auto Globals - Example1 TODO: Auto Globals - Example1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal('TODO', 'TODO');",
              "err": {},
              "uuid": "a5c16da6-dbea-4a14-b260-708feecd91ac",
              "parentUUID": "c3b36404-8ded-4d1b-8118-a939d53c6d75",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a5c16da6-dbea-4a14-b260-708feecd91ac"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1f91ca1c-1990-4015-bf7e-193752f91f37",
          "title": "TODO: Auto Globals - Example2",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\03_scope\\01_compile-and-execute\\02_auto-global_docs.js",
          "file": "\\src\\collection\\js-basics\\03_scope\\01_compile-and-execute\\02_auto-global_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TODO: Auto Globals - Example2",
              "fullTitle": "TODO: Auto Globals - Example2 TODO: Auto Globals - Example2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal('TODO', 'TODO');",
              "err": {},
              "uuid": "3ed232a4-7c53-4dec-bb56-17b7f9c68f3f",
              "parentUUID": "1f91ca1c-1990-4015-bf7e-193752f91f37",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3ed232a4-7c53-4dec-bb56-17b7f9c68f3f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "efa1cacc-6ccf-403c-8be9-fe351ab54cfb",
          "title": "TODO: Nested Scopes",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\03_scope\\01_compile-and-execute\\03_nested-scopes_docs.js",
          "file": "\\src\\collection\\js-basics\\03_scope\\01_compile-and-execute\\03_nested-scopes_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TODO: Nested Scopes",
              "fullTitle": "TODO: Nested Scopes TODO: Nested Scopes",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal('TODO', 'TODO');",
              "err": {},
              "uuid": "eb6f2149-0afe-4b64-bc38-a85115fe76f7",
              "parentUUID": "efa1cacc-6ccf-403c-8be9-fe351ab54cfb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eb6f2149-0afe-4b64-bc38-a85115fe76f7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cfb5eeee-f05b-4e2a-8b2b-45bfca49d4e3",
          "title": "TODO: Function Expression",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\03_scope\\02_function-expression\\01_function-expression_docs.js",
          "file": "\\src\\collection\\js-basics\\03_scope\\02_function-expression\\01_function-expression_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TODO: Function Expression",
              "fullTitle": "TODO: Function Expression TODO: Function Expression",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal('TODO', 'TODO');",
              "err": {},
              "uuid": "e8965935-5ed6-48c2-88d9-4cb2d838c40a",
              "parentUUID": "cfb5eeee-f05b-4e2a-8b2b-45bfca49d4e3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e8965935-5ed6-48c2-88d9-4cb2d838c40a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d716cd2d-8a73-41a3-a542-76a03bb6943f",
          "title": "TODO: Named Function Expression",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\03_scope\\02_function-expression\\02_named-function-expression_docs.js",
          "file": "\\src\\collection\\js-basics\\03_scope\\02_function-expression\\02_named-function-expression_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TODO: Named Function Expression",
              "fullTitle": "TODO: Named Function Expression TODO: Named Function Expression",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal('TODO', 'TODO');",
              "err": {},
              "uuid": "d7f9b6c4-0e0c-4c27-a94b-f8c74793947d",
              "parentUUID": "d716cd2d-8a73-41a3-a542-76a03bb6943f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d7f9b6c4-0e0c-4c27-a94b-f8c74793947d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "267bdcd1-9adf-440f-b0da-dc018d32f942",
          "title": "TODO: Anonymous Arrow Function Expression",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\03_scope\\02_function-expression\\03_anonymous-arrow-functions_docs.js",
          "file": "\\src\\collection\\js-basics\\03_scope\\02_function-expression\\03_anonymous-arrow-functions_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TODO: Anonymous Arrow Function Expression",
              "fullTitle": "TODO: Anonymous Arrow Function Expression TODO: Anonymous Arrow Function Expression",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal('TODO', 'TODO');",
              "err": {},
              "uuid": "9c5d5604-78fa-4d19-a1a0-ca2cad94dfe2",
              "parentUUID": "267bdcd1-9adf-440f-b0da-dc018d32f942",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9c5d5604-78fa-4d19-a1a0-ca2cad94dfe2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fdb7c714-f47d-482f-a164-55191ea17bc2",
          "title": "TODO: Named Arrow Function Expression",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\03_scope\\02_function-expression\\04_named-arrow-functions_docs.js",
          "file": "\\src\\collection\\js-basics\\03_scope\\02_function-expression\\04_named-arrow-functions_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TODO: Named Arrow Function Expression",
              "fullTitle": "TODO: Named Arrow Function Expression TODO: Named Arrow Function Expression",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal('TODO', 'TODO');",
              "err": {},
              "uuid": "4bf733f9-1586-4442-aa26-e08a11e947ce",
              "parentUUID": "fdb7c714-f47d-482f-a164-55191ea17bc2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4bf733f9-1586-4442-aa26-e08a11e947ce"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "28fc28b6-9eab-4bb7-b482-d86ec782fd1c",
          "title": "TODO: Lexical Scope",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\01_lexical-scope_docs.js",
          "file": "\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\01_lexical-scope_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TODO: Lexical Scope",
              "fullTitle": "TODO: Lexical Scope TODO: Lexical Scope",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal('TODO', 'TODO');",
              "err": {},
              "uuid": "de59f90e-7c8b-40a3-9508-f933b14ca3f3",
              "parentUUID": "28fc28b6-9eab-4bb7-b482-d86ec782fd1c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "de59f90e-7c8b-40a3-9508-f933b14ca3f3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a6b72ac2-ea26-4fc3-93fe-eb59a7dd74c4",
          "title": "TODO: Naming collision problem",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\02_function-scope_docs.js",
          "file": "\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\02_function-scope_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TODO: Lexical Scope",
              "fullTitle": "TODO: Naming collision problem TODO: Lexical Scope",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal('TODO', 'TODO');",
              "err": {},
              "uuid": "14c99a8c-7f17-447f-abea-948f6da94fef",
              "parentUUID": "a6b72ac2-ea26-4fc3-93fe-eb59a7dd74c4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "14c99a8c-7f17-447f-abea-948f6da94fef"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e3d52033-59f7-430e-a9f1-d2a5ee75df5d",
          "title": "TODO: Use function declaration as scope",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\02_function-scope_docs.js",
          "file": "\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\02_function-scope_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TODO: Use function declaration as scope",
              "fullTitle": "TODO: Use function declaration as scope TODO: Use function declaration as scope",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal('TODO', 'TODO');",
              "err": {},
              "uuid": "ed05f0ef-5320-4033-b0ae-2231b794aff0",
              "parentUUID": "e3d52033-59f7-430e-a9f1-d2a5ee75df5d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ed05f0ef-5320-4033-b0ae-2231b794aff0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e4944295-fe3b-4a72-9d2b-593448b5674d",
          "title": "TODO: Use function expression as scope",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\02_function-scope_docs.js",
          "file": "\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\02_function-scope_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TODO: Use function expression as scope",
              "fullTitle": "TODO: Use function expression as scope TODO: Use function expression as scope",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal('TODO', 'TODO');",
              "err": {},
              "uuid": "405185d4-36f8-4df5-9134-e3d568fb8e0f",
              "parentUUID": "e4944295-fe3b-4a72-9d2b-593448b5674d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "405185d4-36f8-4df5-9134-e3d568fb8e0f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7543ff5c-e85a-4668-8d40-5bebe8061ecd",
          "title": "TODO: Use IIFE as scope",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\02_function-scope_docs.js",
          "file": "\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\02_function-scope_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TODO: Use IIFE as scope",
              "fullTitle": "TODO: Use IIFE as scope TODO: Use IIFE as scope",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal('TODO', 'TODO');",
              "err": {},
              "uuid": "3eae5dd6-0891-438e-b389-b7ac55344005",
              "parentUUID": "7543ff5c-e85a-4668-8d40-5bebe8061ecd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3eae5dd6-0891-438e-b389-b7ac55344005"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cb2e0798-b353-4d29-a71a-673e00e4996b",
          "title": "TODO: Anonymous IIFE as scope",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\02_function-scope_docs.js",
          "file": "\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\02_function-scope_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TODO: Anonymous IIFE as scope",
              "fullTitle": "TODO: Anonymous IIFE as scope TODO: Anonymous IIFE as scope",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal('TODO', 'TODO');",
              "err": {},
              "uuid": "bc25dde3-bf4c-4660-bc44-7e27dd1f6b8b",
              "parentUUID": "cb2e0798-b353-4d29-a71a-673e00e4996b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bc25dde3-bf4c-4660-bc44-7e27dd1f6b8b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "370207d6-e7da-41b2-93e6-6f1d05465942",
          "title": "TODO: Use try catch and IIFE",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\02_function-scope_docs.js",
          "file": "\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\02_function-scope_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TODO: Use try catch and IIFE",
              "fullTitle": "TODO: Use try catch and IIFE TODO: Use try catch and IIFE",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal('TODO', 'TODO');",
              "err": {},
              "uuid": "ad46d368-2725-45aa-b147-185b290778ed",
              "parentUUID": "370207d6-e7da-41b2-93e6-6f1d05465942",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ad46d368-2725-45aa-b147-185b290778ed"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "16b33aad-740a-4022-a7da-e31064be0721",
          "title": "TODO: Use block scope",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\03_block-scope_docs.js",
          "file": "\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\03_block-scope_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TODO: Use block scope",
              "fullTitle": "TODO: Use block scope TODO: Use block scope",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal('TODO', 'TODO');",
              "err": {},
              "uuid": "645d7327-581e-46b0-96ba-9cd5a74f1933",
              "parentUUID": "16b33aad-740a-4022-a7da-e31064be0721",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "645d7327-581e-46b0-96ba-9cd5a74f1933"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bc3f085f-4ee9-46a8-ba74-4cbcf6215dce",
          "title": "TODO: Block scope intent",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\03_block-scope_docs.js",
          "file": "\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\03_block-scope_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TODO: Block scope intent",
              "fullTitle": "TODO: Block scope intent TODO: Block scope intent",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal('TODO', 'TODO');",
              "err": {},
              "uuid": "d95f90f3-5c8f-4167-a35b-91f2c530664f",
              "parentUUID": "bc3f085f-4ee9-46a8-ba74-4cbcf6215dce",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d95f90f3-5c8f-4167-a35b-91f2c530664f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "692161dc-52da-4908-ac94-bd3961cb6929",
          "title": "TODO: Use let and var in intended places",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\03_block-scope_docs.js",
          "file": "\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\03_block-scope_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TODO: Use let and var in intended places",
              "fullTitle": "TODO: Use let and var in intended places TODO: Use let and var in intended places",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal('TODO', 'TODO');",
              "err": {},
              "uuid": "27b3c9e1-f653-49d0-a474-0abe36b9240e",
              "parentUUID": "692161dc-52da-4908-ac94-bd3961cb6929",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "27b3c9e1-f653-49d0-a474-0abe36b9240e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d441a85d-87fa-402a-a855-3a220c3a4962",
          "title": "TODO: var is preferable in some cases (try catch)",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\03_block-scope_docs.js",
          "file": "\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\03_block-scope_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TODO: var is preferable in some cases (try catch)",
              "fullTitle": "TODO: var is preferable in some cases (try catch) TODO: var is preferable in some cases (try catch)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal('TODO', 'TODO');",
              "err": {},
              "uuid": "27eafe96-7c17-4081-8ab1-04dd00858f14",
              "parentUUID": "d441a85d-87fa-402a-a855-3a220c3a4962",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "27eafe96-7c17-4081-8ab1-04dd00858f14"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "62a57e8a-9948-4b07-84cf-641c7663fdb7",
          "title": "TODO: Explicit let block",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\03_block-scope_docs.js",
          "file": "\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\03_block-scope_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TODO: Explicit let block",
              "fullTitle": "TODO: Explicit let block TODO: Explicit let block",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal('TODO', 'TODO');",
              "err": {},
              "uuid": "83a4d595-238f-4c28-ba2d-3b08735c8b0b",
              "parentUUID": "62a57e8a-9948-4b07-84cf-641c7663fdb7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "83a4d595-238f-4c28-ba2d-3b08735c8b0b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "94348d1b-786b-4cb4-aa7f-a7ec020b5df7",
          "title": "TODO: const",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\03_block-scope_docs.js",
          "file": "\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\03_block-scope_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TODO: const",
              "fullTitle": "TODO: const TODO: const",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal('TODO', 'TODO');",
              "err": {},
              "uuid": "b3c56e79-9d7a-458a-9661-2d995a5746ce",
              "parentUUID": "94348d1b-786b-4cb4-aa7f-a7ec020b5df7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b3c56e79-9d7a-458a-9661-2d995a5746ce"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1083b5e2-a8e2-4b96-9a02-7ce998014999",
          "title": "TODO: Variable hoisting",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\04_hoisting_docs.js",
          "file": "\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\04_hoisting_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TODO: Variable hoisting",
              "fullTitle": "TODO: Variable hoisting TODO: Variable hoisting",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal('TODO', 'TODO');",
              "err": {},
              "uuid": "f4c6454a-8a8f-4f23-8b6c-3e5034b27688",
              "parentUUID": "1083b5e2-a8e2-4b96-9a02-7ce998014999",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f4c6454a-8a8f-4f23-8b6c-3e5034b27688"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d6342efd-f8d9-4f98-b20f-8f891bf025c6",
          "title": "TODO: Function hoisting",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\04_hoisting_docs.js",
          "file": "\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\04_hoisting_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TODO: Function hoisting",
              "fullTitle": "TODO: Function hoisting TODO: Function hoisting",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal('TODO', 'TODO');",
              "err": {},
              "uuid": "3115d8b7-aac8-4501-8ac9-bff71fc7de9a",
              "parentUUID": "d6342efd-f8d9-4f98-b20f-8f891bf025c6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3115d8b7-aac8-4501-8ac9-bff71fc7de9a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4e208975-b32f-4028-85c1-3fa32624c8d2",
          "title": "TODO: Function expressions cannot be hoisted",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\04_hoisting_docs.js",
          "file": "\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\04_hoisting_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TODO: Function expressions cannot be hoisted",
              "fullTitle": "TODO: Function expressions cannot be hoisted TODO: Function expressions cannot be hoisted",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal('TODO', 'TODO');",
              "err": {},
              "uuid": "782a8889-7f1e-4381-abc8-ce6e97bd3edb",
              "parentUUID": "4e208975-b32f-4028-85c1-3fa32624c8d2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "782a8889-7f1e-4381-abc8-ce6e97bd3edb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "720e2c7e-df75-48ea-899e-f9cd4207de3c",
          "title": "TODO: Variable hoisting gotcha",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\04_hoisting_docs.js",
          "file": "\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\04_hoisting_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TODO: Variable hoisting gotcha",
              "fullTitle": "TODO: Variable hoisting gotcha TODO: Variable hoisting gotcha",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal('TODO', 'TODO');",
              "err": {},
              "uuid": "adce45b5-84d9-47e0-b418-dcabb01b4a42",
              "parentUUID": "720e2c7e-df75-48ea-899e-f9cd4207de3c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "adce45b5-84d9-47e0-b418-dcabb01b4a42"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dfa4e83f-79ec-46b9-8637-13e38c01f3b9",
          "title": "TODO: Variable hoisting usually bad & function hoisting can be useful",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\04_hoisting_docs.js",
          "file": "\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\04_hoisting_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TODO: Variable hoisting usually bad & function hoisting can be useful",
              "fullTitle": "TODO: Variable hoisting usually bad & function hoisting can be useful TODO: Variable hoisting usually bad & function hoisting can be useful",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal('TODO', 'TODO');",
              "err": {},
              "uuid": "6c8e73c3-a32f-4d0e-9335-15b13ef9b094",
              "parentUUID": "dfa4e83f-79ec-46b9-8637-13e38c01f3b9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6c8e73c3-a32f-4d0e-9335-15b13ef9b094"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ad1f71d0-413f-4260-954d-0b92ff8616a8",
          "title": "TODO: let hoisting (Temporal dead zone error)",
          "fullFile": "D:\\Work\\Development\\Language-Solutions\\Javascript\\JS_solutions\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\04_hoisting_docs.js",
          "file": "\\src\\collection\\js-basics\\03_scope\\03_advanced-scope\\04_hoisting_docs.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TODO: let hoisting (Temporal dead zone error)",
              "fullTitle": "TODO: let hoisting (Temporal dead zone error) TODO: let hoisting (Temporal dead zone error)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal('TODO', 'TODO');",
              "err": {},
              "uuid": "b18e18be-5ead-4577-b094-a6ce8d20d5d1",
              "parentUUID": "ad1f71d0-413f-4260-954d-0b92ff8616a8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b18e18be-5ead-4577-b094-a6ce8d20d5d1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "5.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": {
        "reportDir": "src/collection/js-basics/documentation"
      },
      "version": "4.0.1"
    }
  }
}